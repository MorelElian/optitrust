
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20210419

module MenhirBasics = struct
  
  exception Error
  
  type token = 
    | XOR_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 16 "cparser/pre_parser.ml"
  )
    | WHILE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 21 "cparser/pre_parser.ml"
  )
    | VOLATILE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 26 "cparser/pre_parser.ml"
  )
    | VOID of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 31 "cparser/pre_parser.ml"
  )
    | VAR_NAME of (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 36 "cparser/pre_parser.ml"
  )
    | UNSIGNED of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 41 "cparser/pre_parser.ml"
  )
    | UNION of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 46 "cparser/pre_parser.ml"
  )
    | UNDERSCORE_BOOL of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 51 "cparser/pre_parser.ml"
  )
    | TYPEDEF_NAME of (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 56 "cparser/pre_parser.ml"
  )
    | TYPEDEF of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 61 "cparser/pre_parser.ml"
  )
    | TILDE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 66 "cparser/pre_parser.ml"
  )
    | SWITCH of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 71 "cparser/pre_parser.ml"
  )
    | SUB_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 76 "cparser/pre_parser.ml"
  )
    | STRUCT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 81 "cparser/pre_parser.ml"
  )
    | STRING_LITERAL of (
# 50 "cparser/pre_parser.mly"
      (bool * int64 list * Cabs.loc)
# 86 "cparser/pre_parser.ml"
  )
    | STATIC_ASSERT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 91 "cparser/pre_parser.ml"
  )
    | STATIC of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 96 "cparser/pre_parser.ml"
  )
    | STAR of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 101 "cparser/pre_parser.ml"
  )
    | SLASH of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 106 "cparser/pre_parser.ml"
  )
    | SIZEOF of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 111 "cparser/pre_parser.ml"
  )
    | SIGNED of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 116 "cparser/pre_parser.ml"
  )
    | SHORT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 121 "cparser/pre_parser.ml"
  )
    | SEMICOLON of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 126 "cparser/pre_parser.ml"
  )
    | RPAREN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 131 "cparser/pre_parser.ml"
  )
    | RIGHT_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 136 "cparser/pre_parser.ml"
  )
    | RIGHT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 141 "cparser/pre_parser.ml"
  )
    | RETURN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 146 "cparser/pre_parser.ml"
  )
    | RESTRICT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 151 "cparser/pre_parser.ml"
  )
    | REGISTER of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 156 "cparser/pre_parser.ml"
  )
    | RBRACK of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 161 "cparser/pre_parser.ml"
  )
    | RBRACE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 166 "cparser/pre_parser.ml"
  )
    | QUESTION of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 171 "cparser/pre_parser.ml"
  )
    | PTR of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 176 "cparser/pre_parser.ml"
  )
    | PRE_NAME of (
# 46 "cparser/pre_parser.mly"
      (string)
# 181 "cparser/pre_parser.ml"
  )
    | PRAGMA of (
# 51 "cparser/pre_parser.mly"
      (string * Cabs.loc)
# 186 "cparser/pre_parser.ml"
  )
    | PLUS of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 191 "cparser/pre_parser.ml"
  )
    | PERCENT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 196 "cparser/pre_parser.ml"
  )
    | PACKED of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 201 "cparser/pre_parser.ml"
  )
    | OR_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 206 "cparser/pre_parser.ml"
  )
    | NORETURN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 211 "cparser/pre_parser.ml"
  )
    | NEQ of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 216 "cparser/pre_parser.ml"
  )
    | MUL_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 221 "cparser/pre_parser.ml"
  )
    | MOD_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 226 "cparser/pre_parser.ml"
  )
    | MINUS of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 231 "cparser/pre_parser.ml"
  )
    | LT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 236 "cparser/pre_parser.ml"
  )
    | LPAREN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 241 "cparser/pre_parser.ml"
  )
    | LONG of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 246 "cparser/pre_parser.ml"
  )
    | LEQ of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 251 "cparser/pre_parser.ml"
  )
    | LEFT_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 256 "cparser/pre_parser.ml"
  )
    | LEFT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 261 "cparser/pre_parser.ml"
  )
    | LBRACK of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 266 "cparser/pre_parser.ml"
  )
    | LBRACE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 271 "cparser/pre_parser.ml"
  )
    | INT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 276 "cparser/pre_parser.ml"
  )
    | INLINE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 281 "cparser/pre_parser.ml"
  )
    | INC of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 286 "cparser/pre_parser.ml"
  )
    | IF of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 291 "cparser/pre_parser.ml"
  )
    | HAT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 296 "cparser/pre_parser.ml"
  )
    | GT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 301 "cparser/pre_parser.ml"
  )
    | GOTO of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 306 "cparser/pre_parser.ml"
  )
    | GEQ of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 311 "cparser/pre_parser.ml"
  )
    | FOR of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 316 "cparser/pre_parser.ml"
  )
    | FLOAT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 321 "cparser/pre_parser.ml"
  )
    | EXTERN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 326 "cparser/pre_parser.ml"
  )
    | EQEQ of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 331 "cparser/pre_parser.ml"
  )
    | EQ of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 336 "cparser/pre_parser.ml"
  )
    | EOF
    | ENUM of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 342 "cparser/pre_parser.ml"
  )
    | ELSE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 347 "cparser/pre_parser.ml"
  )
    | ELLIPSIS of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 352 "cparser/pre_parser.ml"
  )
    | DOUBLE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 357 "cparser/pre_parser.ml"
  )
    | DOT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 362 "cparser/pre_parser.ml"
  )
    | DO of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 367 "cparser/pre_parser.ml"
  )
    | DIV_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 372 "cparser/pre_parser.ml"
  )
    | DEFAULT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 377 "cparser/pre_parser.ml"
  )
    | DEC of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 382 "cparser/pre_parser.ml"
  )
    | CONTINUE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 387 "cparser/pre_parser.ml"
  )
    | CONSTANT of (
# 49 "cparser/pre_parser.mly"
      (Cabs.constant * Cabs.loc)
# 392 "cparser/pre_parser.ml"
  )
    | CONST of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 397 "cparser/pre_parser.ml"
  )
    | COMMA of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 402 "cparser/pre_parser.ml"
  )
    | COLON of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 407 "cparser/pre_parser.ml"
  )
    | CHAR of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 412 "cparser/pre_parser.ml"
  )
    | CASE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 417 "cparser/pre_parser.ml"
  )
    | BUILTIN_VA_ARG of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 422 "cparser/pre_parser.ml"
  )
    | BUILTIN_OFFSETOF of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 427 "cparser/pre_parser.ml"
  )
    | BREAK of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 432 "cparser/pre_parser.ml"
  )
    | BARBAR of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 437 "cparser/pre_parser.ml"
  )
    | BAR of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 442 "cparser/pre_parser.ml"
  )
    | BANG of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 447 "cparser/pre_parser.ml"
  )
    | AUTO of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 452 "cparser/pre_parser.ml"
  )
    | ATTRIBUTE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 457 "cparser/pre_parser.ml"
  )
    | ASM of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 462 "cparser/pre_parser.ml"
  )
    | AND_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 467 "cparser/pre_parser.ml"
  )
    | ANDAND of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 472 "cparser/pre_parser.ml"
  )
    | AND of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 477 "cparser/pre_parser.ml"
  )
    | ALIGNOF of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 482 "cparser/pre_parser.ml"
  )
    | ALIGNAS of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 487 "cparser/pre_parser.ml"
  )
    | ADD_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 492 "cparser/pre_parser.ml"
  )
  
end

include MenhirBasics

let _eRR =
  MenhirBasics.Error

# 26 "cparser/pre_parser.mly"
  
  open Pre_parser_aux

  let set_id_type (_,r,_) t =
    r := t

  let declare_varname (i,_,_) =
    !declare_varname i

  let declare_typename (i,_,_) =
    !declare_typename i

  type 'id fun_declarator_ctx =
  | Decl_ident
  | Decl_other
  | Decl_fun of (unit -> unit)
  | Decl_krfun of 'id


# 522 "cparser/pre_parser.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | ADD_ASSIGN _ ->
          97
      | ALIGNAS _ ->
          96
      | ALIGNOF _ ->
          95
      | AND _ ->
          94
      | ANDAND _ ->
          93
      | AND_ASSIGN _ ->
          92
      | ASM _ ->
          91
      | ATTRIBUTE _ ->
          90
      | AUTO _ ->
          89
      | BANG _ ->
          88
      | BAR _ ->
          87
      | BARBAR _ ->
          86
      | BREAK _ ->
          85
      | BUILTIN_OFFSETOF _ ->
          84
      | BUILTIN_VA_ARG _ ->
          83
      | CASE _ ->
          82
      | CHAR _ ->
          81
      | COLON _ ->
          80
      | COMMA _ ->
          79
      | CONST _ ->
          78
      | CONSTANT _ ->
          77
      | CONTINUE _ ->
          76
      | DEC _ ->
          75
      | DEFAULT _ ->
          74
      | DIV_ASSIGN _ ->
          73
      | DO _ ->
          72
      | DOT _ ->
          71
      | DOUBLE _ ->
          70
      | ELLIPSIS _ ->
          69
      | ELSE _ ->
          68
      | ENUM _ ->
          67
      | EOF ->
          66
      | EQ _ ->
          65
      | EQEQ _ ->
          64
      | EXTERN _ ->
          63
      | FLOAT _ ->
          62
      | FOR _ ->
          61
      | GEQ _ ->
          60
      | GOTO _ ->
          59
      | GT _ ->
          58
      | HAT _ ->
          57
      | IF _ ->
          56
      | INC _ ->
          55
      | INLINE _ ->
          54
      | INT _ ->
          53
      | LBRACE _ ->
          52
      | LBRACK _ ->
          51
      | LEFT _ ->
          50
      | LEFT_ASSIGN _ ->
          49
      | LEQ _ ->
          48
      | LONG _ ->
          47
      | LPAREN _ ->
          46
      | LT _ ->
          45
      | MINUS _ ->
          44
      | MOD_ASSIGN _ ->
          43
      | MUL_ASSIGN _ ->
          42
      | NEQ _ ->
          41
      | NORETURN _ ->
          40
      | OR_ASSIGN _ ->
          39
      | PACKED _ ->
          38
      | PERCENT _ ->
          37
      | PLUS _ ->
          36
      | PRAGMA _ ->
          35
      | PRE_NAME _ ->
          34
      | PTR _ ->
          33
      | QUESTION _ ->
          32
      | RBRACE _ ->
          31
      | RBRACK _ ->
          30
      | REGISTER _ ->
          29
      | RESTRICT _ ->
          28
      | RETURN _ ->
          27
      | RIGHT _ ->
          26
      | RIGHT_ASSIGN _ ->
          25
      | RPAREN _ ->
          24
      | SEMICOLON _ ->
          23
      | SHORT _ ->
          22
      | SIGNED _ ->
          21
      | SIZEOF _ ->
          20
      | SLASH _ ->
          19
      | STAR _ ->
          18
      | STATIC _ ->
          17
      | STATIC_ASSERT _ ->
          16
      | STRING_LITERAL _ ->
          15
      | STRUCT _ ->
          14
      | SUB_ASSIGN _ ->
          13
      | SWITCH _ ->
          12
      | TILDE _ ->
          11
      | TYPEDEF _ ->
          10
      | TYPEDEF_NAME _ ->
          9
      | UNDERSCORE_BOOL _ ->
          8
      | UNION _ ->
          7
      | UNSIGNED _ ->
          6
      | VAR_NAME _ ->
          5
      | VOID _ ->
          4
      | VOLATILE _ ->
          3
      | WHILE _ ->
          2
      | XOR_ASSIGN _ ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | ADD_ASSIGN _v ->
          Obj.repr _v
      | ALIGNAS _v ->
          Obj.repr _v
      | ALIGNOF _v ->
          Obj.repr _v
      | AND _v ->
          Obj.repr _v
      | ANDAND _v ->
          Obj.repr _v
      | AND_ASSIGN _v ->
          Obj.repr _v
      | ASM _v ->
          Obj.repr _v
      | ATTRIBUTE _v ->
          Obj.repr _v
      | AUTO _v ->
          Obj.repr _v
      | BANG _v ->
          Obj.repr _v
      | BAR _v ->
          Obj.repr _v
      | BARBAR _v ->
          Obj.repr _v
      | BREAK _v ->
          Obj.repr _v
      | BUILTIN_OFFSETOF _v ->
          Obj.repr _v
      | BUILTIN_VA_ARG _v ->
          Obj.repr _v
      | CASE _v ->
          Obj.repr _v
      | CHAR _v ->
          Obj.repr _v
      | COLON _v ->
          Obj.repr _v
      | COMMA _v ->
          Obj.repr _v
      | CONST _v ->
          Obj.repr _v
      | CONSTANT _v ->
          Obj.repr _v
      | CONTINUE _v ->
          Obj.repr _v
      | DEC _v ->
          Obj.repr _v
      | DEFAULT _v ->
          Obj.repr _v
      | DIV_ASSIGN _v ->
          Obj.repr _v
      | DO _v ->
          Obj.repr _v
      | DOT _v ->
          Obj.repr _v
      | DOUBLE _v ->
          Obj.repr _v
      | ELLIPSIS _v ->
          Obj.repr _v
      | ELSE _v ->
          Obj.repr _v
      | ENUM _v ->
          Obj.repr _v
      | EOF ->
          Obj.repr ()
      | EQ _v ->
          Obj.repr _v
      | EQEQ _v ->
          Obj.repr _v
      | EXTERN _v ->
          Obj.repr _v
      | FLOAT _v ->
          Obj.repr _v
      | FOR _v ->
          Obj.repr _v
      | GEQ _v ->
          Obj.repr _v
      | GOTO _v ->
          Obj.repr _v
      | GT _v ->
          Obj.repr _v
      | HAT _v ->
          Obj.repr _v
      | IF _v ->
          Obj.repr _v
      | INC _v ->
          Obj.repr _v
      | INLINE _v ->
          Obj.repr _v
      | INT _v ->
          Obj.repr _v
      | LBRACE _v ->
          Obj.repr _v
      | LBRACK _v ->
          Obj.repr _v
      | LEFT _v ->
          Obj.repr _v
      | LEFT_ASSIGN _v ->
          Obj.repr _v
      | LEQ _v ->
          Obj.repr _v
      | LONG _v ->
          Obj.repr _v
      | LPAREN _v ->
          Obj.repr _v
      | LT _v ->
          Obj.repr _v
      | MINUS _v ->
          Obj.repr _v
      | MOD_ASSIGN _v ->
          Obj.repr _v
      | MUL_ASSIGN _v ->
          Obj.repr _v
      | NEQ _v ->
          Obj.repr _v
      | NORETURN _v ->
          Obj.repr _v
      | OR_ASSIGN _v ->
          Obj.repr _v
      | PACKED _v ->
          Obj.repr _v
      | PERCENT _v ->
          Obj.repr _v
      | PLUS _v ->
          Obj.repr _v
      | PRAGMA _v ->
          Obj.repr _v
      | PRE_NAME _v ->
          Obj.repr _v
      | PTR _v ->
          Obj.repr _v
      | QUESTION _v ->
          Obj.repr _v
      | RBRACE _v ->
          Obj.repr _v
      | RBRACK _v ->
          Obj.repr _v
      | REGISTER _v ->
          Obj.repr _v
      | RESTRICT _v ->
          Obj.repr _v
      | RETURN _v ->
          Obj.repr _v
      | RIGHT _v ->
          Obj.repr _v
      | RIGHT_ASSIGN _v ->
          Obj.repr _v
      | RPAREN _v ->
          Obj.repr _v
      | SEMICOLON _v ->
          Obj.repr _v
      | SHORT _v ->
          Obj.repr _v
      | SIGNED _v ->
          Obj.repr _v
      | SIZEOF _v ->
          Obj.repr _v
      | SLASH _v ->
          Obj.repr _v
      | STAR _v ->
          Obj.repr _v
      | STATIC _v ->
          Obj.repr _v
      | STATIC_ASSERT _v ->
          Obj.repr _v
      | STRING_LITERAL _v ->
          Obj.repr _v
      | STRUCT _v ->
          Obj.repr _v
      | SUB_ASSIGN _v ->
          Obj.repr _v
      | SWITCH _v ->
          Obj.repr _v
      | TILDE _v ->
          Obj.repr _v
      | TYPEDEF _v ->
          Obj.repr _v
      | TYPEDEF_NAME _v ->
          Obj.repr _v
      | UNDERSCORE_BOOL _v ->
          Obj.repr _v
      | UNION _v ->
          Obj.repr _v
      | UNSIGNED _v ->
          Obj.repr _v
      | VAR_NAME _v ->
          Obj.repr _v
      | VOID _v ->
          Obj.repr _v
      | VOLATILE _v ->
          Obj.repr _v
      | WHILE _v ->
          Obj.repr _v
      | XOR_ASSIGN _v ->
          Obj.repr _v
  
  and default_reduction =
    (16, "\000\187\000\001\000\000\001K\001L\001T\001>\001U\000\176\000\000\001=\0010\001S\001N\001J\0012\000\000\001[\000\000\000\000\001g\0013\001d\000\000\000\000\001\002\001e\001f\000\000\000\000\000\000\001P\001O\000\000\000\000\001Q\000\000\000\000\000\000\000\000\000\000\000\153\000\151\000\150\000\152\000\149\000\000\000\000\000\000\001\003\000\000\000\000\000\000\000\000\001R\001M\000\231\000\232\000\000\001I\000\000\000\000\001h\001c\000\000\000\000\000\185\000\000\001$\001%\001V\000\000\000\000\000\000\0017\000\000\000\000\000\000\000\000\000:\000\000\0014\000\247\000\000\000\000\000\254\000\000\000\000\000,\000(\000*\000-\000$\000&\000)\000#\000%\000+\000'\000\000\000\000\001\027\001\026\000\000\000\000\000\196\000\197\000\198\000\000\000\195\000\194\000\000\000\n\000\011\000\000\000\000\000\000\001\b\001\n\001\t\001\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\000\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\000\134\000\000\000>\000\133\000\000\000\000\000\"\000\000\000\249\000\014\000\000\000\000\000\015\000\000\000\000\000\248\000\255\000\000\000\253\001\000\001_\000\000\000\000\000\000\000\000\001.\001?\000\231\000\000\001G\001H\000\185\000\000\000\186\001W\001&\000\000\000\231\000\000\000\185\000\000\0018\0016\000\000\000\000\000c\000\000\000b\001\020\000\000\000\000\000\231\000\000\000\000\001\020\000\000\000\000\000\154\000\142\000\141\001/\0011\000\176\000\000\000\178\000\177\000\179\000\180\000\181\000\000\000L\000I\000H\000K\000\182\000J\000\000\000\000\001\016\000\000\001\018\000\000\001\019\001\017\000\000\000\176\000\000\000\181\000\000\001\020\000?\000\000\000\000\000\246\000\244\000\000\000\000\000\000\000\000\000\243\000\000\000\231\000\000\000\235\000o\000\000\000\236\000\000\000\231\000\000\000\000\000\000\000\000\000\000\000q\000\212\000r\000\000\000\231\000\000\000t\000\000\000\000\000a\000\000\0003\000\000\000s\000\000\000n\000\000\000p\000\242\000\000\000\231\000\000\000\000\000\000\000\241\000g\000\202\000\000\000v\000\000\000\000\000\000\000\155\000\000\000u\000\000\000\000\001<\000\000\000\000\001:\000\000\001;\000\000\0015\000\000\000\000\000\000\000\231\000\000\000\185\000\000\000\000\001b\000\000\000\000\000\000\000\000\000\231\000\000\001F\000\204\000\000\0001\000\000\0000\000\000\000\000\000\000\000\251\000\000\000\000\000\000\000k\000\000\000l\000m\000\000\000\252\000\000\000\000\000\000\000\250\001^\000\000\000\000\000\000\000\146\000\000\000\145\000\000\000\000\000.\000\000\000\148\000\147\000\000\000\000\000\000\000z\000\000\000\000\000i\000\000\000\000\000|\000~\000\000\000x\000}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\0008\000\000\000j\000\216\000\000\0009\000\163\000\000\000\000\001\001\000\000\001\005\001]\000\000\000\000\000;\000\000\000\000\001`\000\000\000/\000\176\000\000\000\181\000\000\001D\001C\001E\000\176\000\000\000\176\000\000\000\181\000\000\000\181\000\000\000\188\000E\000\000\000\176\000\000\000\176\000\000\000\181\000\000\000\176\000\000\000\176\000\000\000\181\000\000\000\181\000\000\001\020\000\000\000\207\000\000\000\000\000\000\000\171\000\210\000<\000\000\000\000\0006\000\000\000\000\000\168\000\000\000\000\000\000\000\169\000\000\000\000\000\000\000\000\000\170\000\000\000\000\000\000\000\021\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\000\000\030\000\000\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000 \000\174\001*\000\000\000\000\000\000\000\000\000\000\000\165\000\000\000\135\001'\001,\001+\000\000\000\000\000\173\001)\000\000\001(\001-\000\000\000\000\000\000\000\000\001\023\000\000\000\000\000\000\001\020\000\000\000\000\000\156\000\000\000\000\000\239\000\176\000\000\000\181\000\000\000B\000\000\000\176\000\000\000\181\000\000\000\136\000\000\000\000\000\237\000\000\000\167\000\000\000\238\000\000\000\240\000\000\000\000\000\000\001Z\001X\000f\001Y\000\000\000A\000\000\000\000\000@\000\000\000\000\000\162\001\020\000\000\000\000\000\000\000\160\000h\000\161\000\137\000\000\000\000\000w\000\000\001\021\000\000\000\000\000\000\000\000\000\000\000\166\000\175\000\000\0005\0004\0007\000\208\000\138\001A\000\000\000\000\000D\000\000\000\000\000C\001\020\000\000\000\176\000\000\000\181\000\000\000\000\000\176\000\000\000\181\000\000\000F\000\000\000\000\000\172\000\000\000G\000\000\000\139\000\000\001B")
  
  and error =
    (98, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\186,p\195(\016`3 $\006\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\224\145\131\b\160A\128\196\128\144\024 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb\012\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\147.\b*\011\005\002\018\022X\163\129\016\000\000\000\000\000\000\000\000\000\000\001\1852\224\130\160\176P!!e\1388\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004J\000\n\002\128@\000\005\006 \193\1852\224\130\160\176P!!eb\000\000 \000\000\000\016\000\000\000D\162\000\160(\004\000\000Pb\012\000\017(\000(\n\001\000\000\020\024\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb\012\000\000\000\000\000\002\000\000\000\000\000\000\006\224\129\130\b\128A\000\132\128\144\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\255\255\255\255\255\255\255\255\255\255\255\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\006\228\203\130\n\130\193@\132\133\150(\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\006\224\129\130\b\128A\000\132\128\144\b \000\000\000\000\000\000\000\000\000\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000 \000\b\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000n\n\024$\136\004\016\bH\t\000\130\000\000\000\000\000\002\000\000\000\000\000\000\000\004J\000\nb\012\127\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb\012\127\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017(\000(\nn\002\128@\000\005\006 \199\255\255\255\255\255\255\255\255\255\255\255\253\255\255\255\255\255\255\255\255\255\255\255\255\127\255\255\255\255\255\255\255\255\255\255\255\192\004J\000\n\002\128@\000\005\006 \199\255\255\255\255\255\255\255\255\255\255\255\252\000D\160\000\160(\004\000\000Pb\012\127\255\255\255\255\255\255\255\255\255\255\255\192\004J\000\n\002\128@\000\005\006 \199\255\255\255\255\255\255\255\255\255\255\255\252\000D\160\000\160(\004\000\000Pb\012\127\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb\012\127\255\255\255\255\255\255\255\255\255\255\255\223\255\255\255\255\255\255\255\255\255\255\255\240\001\018\128\002\128\160\016\000\001A\1361\255\255\255\255\255\255\255\255\255\255\255\255\127\255\255\255\255\255\255\255\255\255\255\255\223\255\255\255\255\255\255\255\255\255\255\255\247\255\255\255\255\255\255\255\255\255\255\255\252\000\000\000\000\000\000\000\000\000\006\000\000\000\017(\000(\n\001\000\000\020\024\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\018\128\002\128\160\016\000\001A\1361\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\001\000\000\000\004J\000\n\002\128@\000\005\006 \192\000\000\000\000\000\000\000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb`\130 \016@! $\002\b\000\000\000\000\000\000\000\000\000\000\000\000\127\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\000\000\000\007\255\255\255\255\255\255\255\255\255\255\255\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\b\000\128\000\000\000 \000\000D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\128\b\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\002\000\130  \000\000\000 \002\t\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\006\224\145\163\b\160A\128\196\128\144\024 D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\024#\b\160\132\128@\000\192\024 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000n\t\1540\138\012X\012H\r`\002\000\016@! \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000`\140\"\130\018\001\000\003\000`\128\000\000\000\000\000\000\000\000\000\000\000\001\184&h\194(1`1 4\006\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000@\000\001\184$`\194(\016`1`$\006\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b \b\000\132\000\000\000@\000\001\184&h\194(1`1 $\006\bn\t\1520\138\012X\012H\t\001\130\004@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\017(\n*\n\001\000\000\022\024\163\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\127\255\255\255\255\255\255\255\255\255\255\255\198\224\145\163\b\160A\128\196\128\144\024!\184$`\194(\016`1 $\006\bbb\000\000\000D\160\000\160(\004\000\000Pb\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\002\000\128\000\000\000\000\128\b'\255\255\255\255\255\255\255\255\255\255\255\252n\b\024 \136\004\016\bH\t\000\130\000\000\000\000\000\000\000\000\000\000\000\000\031\255\255\255\255\255\255\255\255\255\255\255\240\000\000\000\000\000\000\000\000\000\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\255\255\255\255\255\255\255\255\255\255\255\252n\t\1540\138\012X\012H\t\001\130\027\130f\012\"\131\022\003\018\002@`\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\128\000\000\016\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\016\000\000\000\000D\160\000\160(\004\000\000Pb\012\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\004\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\027\130\006\b\"\001\004\002\018\002@ \128\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\004J\000\n\002\128@\000\005\006 \192\000\000\b\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\016\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \b\128\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\b\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\001\000\000\000\000\000\000H\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\001\000\004\000\000\000\017(\000(\n\001\000\000\020\024\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\255\255\255\255\255\255\255\255\255\255\255\252\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\004J\000\n\002\134@\000E\006 \192\001\018\128\002\128\160\144\000\001A\1360\000D\160\000\160(d\000\004Pbbb\000\000\000\000\000\000\000\000\000\000\000\000\027\130g\012\"\131\006\003\018\002@`\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\b\024C\b\160\128\128@\000\128\024 \000\000\000\000\000\000\000\000\000\000\000\000@\001\1320\138\b\b\004\000\b\001\130\000\000\000\000\000\000\000\000\000\000\000\000\006\232\153\195\b\160\193\128\196\128\144\024 \000\000\000\000\000\000\000\000\000\000\000\000n\t\1560\138\012\024\012H\t\001\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\186 `\002\000\016@! \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\130F\012\"\129\006\003\018\002@`\128\000\000\000\000\000\000\000\000\000\000\000\001\000\006\016\194(  \016\000 \006\b\000\000\000\000\000\000\000\000\000\000\000\000\027\130g\012\"\131\006\003\018\002@`\128\000\000\000\000\000\000\000\000\000\000\000\001\002\006\016\194(  \016\000 \006\b\000\000\000\000\000\000\000\000\000\000\000\000\016\000a\012\"\130\002\001\000\002\000`\128\000\000\000\000\000\000\000\000\000\000\000\001\186&p\194(0`1 $\006\b\000\000\000\000\000\000\000\000\000\000\000\000\027\130g\012\"\131\006\003\018\002@`\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000;\187\239\029:\139\015\151\018\190|\243\128\004J@\n\002\130@\000\005\006 \192\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\000\000\000\000\000\000\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\006JD\n\002\130e\000/\015$\192\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017(\000(\n\001\000\000\020\024\131\000\000\000\000\000\000\000\000\000\000 \000\002\001\146\145\002\128\160\153@\011\195\2010\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\128\000\000\000\128\000\001\000\000\000\000\000 \000\000\000 \000\000@\000\000\000\000\b\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\001\000\128\000\000\000\000\000\000\128\000\031\255\255\255\255\255\255\255\255\255\255\255\240\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000\000\000\016\000\000\000\004\000\000\000\000\000\000\000\000\000\000\127\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128 \000\000\000\000\"\016\002\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\004J\000\n\002\128@\000\005\006 \192\000\000\b\000\000\000\000\000\000\016\000\000\128d\164@\160(&P\002\240\242L\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128d\164@\160(&P\002\240\242L\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\001\018\128\002\128\160\016\000\001A\1360\000\000\002\000\000\000\000\000\000\004\000\000 \025)\016(\n\t\148\000\188<\147\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb\012\000\000\000\128\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\146\145\002\128\160\153@\011\195\2011\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\001\187>\240\194\168\176p1!e\1428\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\b\024C\b\160\128\128@\000\128\024 \000\000\000\000\000\000\000\000\000\000\000\000n\137\1560\138\012\024\012H\t\001\130\000\000\000\000\000\000\000\000\000\000\000\000\002\232\129\128\b\000A\000\132\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\129\1320\138\b\b\004\000\b\001\130\000\000\000\000\000\000\000\000\000\000\000\000\006\232\153\195\b\160\193\128\196\128\144\024 \000\000\000\000\000\000\000\000\000\000\000\000\000D\164\000\160(\004\000\000Pb\012\000\017(\128(\nb@\b\000\128\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\000\000\000\000\b\000\bn\tb\b\004\000\n\001\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\016\002\000 \000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\b\000\128\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\255\255\255\255\255\255\255\255\255\255\255\240\000\000\000\000\000\000\000\000\000\000\000\000@\001\1320\138\b\b\004\000\b\001\130\000\000\000\000\000\000\000\000\000\000\000\000\006\224\153\195\b\160\193\128\196\128\144\024 \184 `\002\000\016@! \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000a\012\"\130\002\001\000\002\000`\128\000\000\000\000\000\000\000\000\000\000\000\001\184&p\194(0`1 $\006\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\000 \002\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000n\t\0240\138\0048\012H\t\001\130\000\000\000\000\000\000\000\000\000\000\000\000\031\255\255\255\255\255\255\255\255\255\255\255\240\000\000\000\000\000\000\000\000\000\000\000\000n\t\0280\138\0048\rH\r\001\130\000\000\000\000\000\000\000\000\000\000\000\000\000")
  
  and start =
    1
  
  and action =
    ((16, "\000\000\000\000-b\000\000\000\000\000\000\000\000\000\000\000\000)\172\000\000\000\000\000\000\000\000\000\000\000\000+&\000\000+\018,\226\000\000\000\000\000\000:d+v\000\000\000\000\000\000,\166+v,\166\000\000\000\000:\130,\166\000\000\000\003+F+T+\236,\020\000\000\000\000\000\000\000\000\000\000+d+\234:\130\000\000+p,\226,\0006\012\000\000\000\000\000\000\000\000\000\192\000\000,\018,\166\000\000\000\000,H6\012\000\000\001\130\000\000\000\000\000\000\000\003+\026,\148\000\0006\012,\172,\226,\226\000\000\002D\000\000\000\000\003\006+\026\000\000,\226\003\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000,\226\004\138\000\000\000\000,\226\005L\000\000\000\000\000\000,\226\000\000\000\000\006\014\000\000\000\000,\226\006\208\007\146\000\000\000\000\000\000\000\000,\226\bT\t\022\t\216,\226\n\154,\226\011\\,\226\012\030,\226\012\224\000\000\000\000,\226\r\162\014d,\226\015&\015\232\016\170\017l*\240,\226\000\000\000\000,\226\000\000\000\000,\226\018.\000\000,\232\000\000\000\000+\024,\226\000\000,\226+V\000\000\000\000+\026\000\000\000\000\000\000,|+.,\014,\242\000\000\000\000\000\000\018\240\000\000\000\000\000\000\019\178\000\000\000\000\000\0006X\000\000\020t\000\000\0216\000\000\000\000+\138,\022\000\000-\030\000\000\000\000+\028-\020\000\000.8\021\248\000\0005\020,@\000\000\000\000\000\000\000\000\000\000\000\0006\236\000\000\000\000\000\000\000\000\000\000.\002\000\000\000\000\000\000\000\000\000\000\000\000\022\186\023|\000\000\024>\000\000\025\000\000\000\000\000)\172\000\0007J\000\000.\162\000\000\000\000+\212-b\000\000\000\000,\028/B2l,\132\000\000,\246\000\0005P\000\000\000\000-\"\000\000-t\000\000\025\194\026\132/B)\172-r\000\000\000\000\000\000\027F\000\0005P\000\000\028\b\000\003\000\000\000\003\000\000-t\000\000-\128\000\000-\132\000\000\000\000-\146\000\000\028\202\029\140\030N\000\000\000\000\000\000-\136\000\000,\004-v-\178\000\000-\146\000\000,<+\028\000\000-$,\226\000\000+<\000\000-\162\000\000\000\192\031\0166X\000\000\031\210\000\000 \148-\162\000\000!V/B-b-\176\000\000\"\024\000\000\000\000-\166\000\000,D\000\000-:+\026+\130\000\000,:,\226-\160\000\000+\026\000\000\000\000,2\000\000-F6\012-\186\000\000\000\000-T,\226,J\000\000-\196\000\000,N-\198\000\000+\236\000\000\000\000+\026-\144+\026\000\000, ,\182\000\000,\018,\226\000\000\000\000-\188\000\000\000\000\"\218-\204#\1566b,\2266b,\1506b,\226\000\000\000\000*\238\000\000\000\000-\194\000\000\000\000,\150-\200\000\000,\168\000\000\000\000-\2205P\000\000-\232#\156\000\000,\180\000\000\000\000:\202\000\0002\238\000\000\000\000\000\000\000\0008:\000\000;\024\000\000/\196\000\0003p\000\000\000\0006\012\000\000)\172\000\000;T\000\0003\242\000\0008\172\000\000;\162\000\0000F\000\0004t\000\000,\180\000\000+.7\134-\242\000\000\000\000\000\000-\012$^\000\000+\026-\250\000\000-\138+..\002\000\000,\226-\148+..\b\000\000+\160+\160+\160\000\000\000\000-\220+.,<% +\026.\004\000\000%\226% \000\000+.+D,\226,\182\000\000,\150% ,\192+.&\164,\220+.'f\000\000.\018.\022\000\000\000\000\000\000,\180-\236,\226,\248+.\000\000.\028\000\000\000\000\000\000\000\000-\172+.\000\000\000\000+V\000\000\000\000-\244,\226-(+.\000\000-\248,\226-<\000\000+.((\000\000-\250+\234\000\000\000\0008\250\000\0000\200\000\0006\012\000\0009l\000\0001J\000\0009\1689\222\000\000+.\000\000-D\000\000-R\000\000, -|+\028\000\000\000\000\000\000\000\000.*\000\000,\178.,\000\000-~+\028\000\000\000\000\000\003(\234,\226\000\000\000\000\000\000\000\000-\210+.\000\000+.\000\000.`.\n,\226-d.<\000\000\000\0007\236\000\000\000\000\000\000\000\000\000\000\000\000, .D\000\000,\178.F\000\000\000\000)\172\000\0008\250\000\0000\200)\172\000\0009l\000\0001J\000\000,\178.H\000\000-b\000\000*n}\004}\000\014\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\000:\004}\004}\004}\004}\004}\004}\004}\004}\004}\000J\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\000\238\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\000\150\004}\004}\004}\004}\004}\000\242\004}\004\133\004\133\000\014\000\018\004\133\000\022\000\026\000\030\004\133\004\133\004\133\004\133\004\133\000*\004\133\004\133\004\133\004\133\004\133\004\133\0002\0006\004\133\004\133\004\133\004\133\004\133\000:\004\133\004\133\004\133\004\133\004\133\004\133\004\133\004\133\004\133\000J\004\133\004\133\004\133\004\133\004\133\004\133\004\133\004\133\000~\004\133\004\133\004\133\004\133\004\133\000\130\004\133\004\133\004\133\004\133\004\133\004\133\004\133\004\133\000\142\004\133\004\133\004\133\004\133\000\146\004\133\004\133\000\218\004\133\004\133\004\133\004\133\004\133\004\133\004\133\000\238\004\133\004\133\000\222\004\133\004\133\004\133\004\133\004\133\004\133\004\133\004\133\000\150\004\133\004\133\004\133\004\133\004\133\000\242\004\133\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\001F\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\001R\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\001Z\005m\005m\005m\005m\002~\005m\005m\005m\002\138\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\002\142\005m\005m\005m\002\150\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\005m\001b\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\001f\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\001j\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\001n\000\229\000\229\001r\001v\000\229\000\229\000\229\000\229\000\229\001z\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\001~a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\001\194\004a\004a\004a\004a\004a\004a\004a\001\198\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004a\004au\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002\014\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002ur\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002*\002\r\002\r\002\r\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\002\022\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\002\026\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002*\002\t\002\t\002\t\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002\014\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002qm\004m\000\014\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\000:\004m\004m\004m\004m\004m\004m\004m\004m\004m\000J\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\000\238\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\000\150\004m\004m\004m\004m\004m\000\242\004m\004u\004u\000\014\000\018\004u\000\022\000\026\000\030\004u\004u\004u\004u\004u\000*\004u\004u\004u\004u\004u\004u\0002\0006\004u\004u\004u\004u\004u\000:\004u\004u\004u\004u\004u\004u\004u\004u\004u\000J\004u\004u\004u\004u\004u\004u\004u\004u\000~\004u\004u\004u\004u\004u\000\130\004u\004u\004u\004u\004u\004u\004u\004u\000\142\004u\004u\004u\004u\000\146\004u\004u\000\218\004u\004u\004u\004u\004u\004u\004u\000\238\004u\004u\000\222\004u\004u\004u\004u\004u\004u\004u\004u\000\150\004u\004u\004u\004u\004u\000\242\004u\004q\004q\000\014\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\000:\004q\004q\004q\004q\004q\004q\004q\004q\004q\000J\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\000\238\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\000\150\004q\004q\004q\004q\004q\000\242\004q\004y\004y\000\014\000\018\004y\000\022\000\026\000\030\004y\004y\004y\004y\004y\000*\004y\004y\004y\004y\004y\004y\0002\0006\004y\004y\004y\004y\004y\000:\004y\004y\004y\004y\004y\004y\004y\004y\004y\000J\004y\004y\004y\004y\004y\004y\004y\004y\000~\004y\004y\004y\004y\004y\000\130\004y\004y\004y\004y\004y\004y\004y\004y\000\142\004y\004y\004y\004y\000\146\004y\004y\000\218\004y\004y\004y\004y\004y\004y\004y\000\238\004y\004y\000\222\004y\004y\004y\004y\004y\004y\004y\004y\000\150\004y\004y\004y\004y\004y\000\242\004yim\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\003\"\001\141\001\141\001\141\001\141\004\"\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\001\141\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\004\006\000\021\000\021\000\021\000\021\003mi\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\238\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\150\000\005\000\005\000\005\000\005\000\005\000\242\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\004\006\000\r\000\r\000\r\000\r\003m\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\004\006\000\t\000\t\000\t\000\t\003m\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t~iia\004\005\004\005\004\005\004\005\004\005\004\005\004\005\004\005\004\005\004\005\004\005\004\005\004\005\004\005\004\005\004\005\004\005\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000a\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\007J\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\007Z\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000qb\"\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\b\202\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\000\197\000\197\000\014\000\018\000\197\000\022\000\026\000\030\000\197\000\197\000\197\000\197\000\197\000*\000\197\000\197\000.\000\197\000\197\000\197\0002\0006\000\197\000\197\000\197\000\197\000\197\000:\000>\000\197\000\197\000\197\000\197\000B\000\197\000\197\000\197\000J\000\197\0032\000\197\000\197\000\197\000\197\000\197\000\197\000~\000\197\000\197\000\197\000\197\000\197\000\130\0036\000\197\000\197\000\197\000\197\000\197\000\197\000\197\000\142\003:\000\197\000\197\000\197\000\146\000\197\000\197\000\218\000\197\000\197\000\197\000\197\000\197\000\197\000\197\000\238\000\197\000\197\000\222\000\197\000\197\000\197\000\197\000\197\000\197\000\197\003>\000\150\000\197\000\197\000\197\000\197\000\197\000\242\000\197\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\004M\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\b\202\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\004M\000\014\000\018\000F\000\022\000\026\000\030\002\217\000\"\000R\004M\0035\000*\000V\0012\000.\000Z\003e\000^\0002\0006\003q\000\162\002\250\001F\006\214\000:\000>\004\225\006\230\000N\005\250\006\234\006\242\000j\003\n\000J\003e\0032\000f\003\137\003u\000n\000F\000z\000~\002B\002N\002\134\002=\004M\000\130\0036\000\134\004M\007j\000\154\006\246\007*\004M\000\142\003:\002\217\000\158\005&\000\146\002v\003\145\000\218\003Q\004M\000\190\007\002\000\194\007\n\000\198\000\238\000\206\002\250\000\222\007\018\000\202\000\210\007\030\004\225\003U\000\250\003>\000\150\007&\003\n\003a\000\254\001\002\000\242\000\014\000\018\002B\000\022\000\026\000\030\000M\000\"\000R\002=\003\209\000*\000V\0012\000.\000Z\003a\000^\0002\0006\b.\0031\0029\000\166\002\254\000:\000>\000F\003\001\003Q\001F\000v\000\162\000j\003}\000J\000\170\0032\007.\002\170\002\217\000n\002\217\000z\000~\003.\003!\003\161\001\233\000F\000\130\0036\000\134\001F\000\214\003\025\002\250\005J\002\250\000\142\003:\003\149\000=\000\246\000\146\003\186\005\022\000\218\003\202\005n\003\n\005~\000\194\003i\000\198\000\238\000\174\0029\000\222\002\254\000\202\000\210\005\178\000F\003e\000\250\003>\000\150\005.\004\138\001\006\000\254\001\002\000\242\003\153\000\018\001\233\000\022\000\026\000\030\007\178\003!\000R\005\166\003e\000*\000V\000A\005:\000Z\007\246\000^\0002\0006\003\025\002\217\006\030\004\162\007F\003\153\003\129\002v\006B\007r\002v\000v\005\134\000j\000E\003\153\003\029\002\250\000R\000\162\001*\000n\000V\000z\000~\000Z\0016\000^\000I\003\n\000\130\0031\000\134\006\238\002j\002\162\006\206\000F\002\174\000\142\b\n\000b\007\190\000j\000\146\b&\003\006\000\218\005\230\007z\003\022\000n\000\194\000z\000\198\003\153\004M\002B\000\222\005\222\000\202\000\210\000\134\002v\002B\000\250\b\002\003\153\003\222\003\242\007\130\000\254\001\002\003\153\000\014\000\018\b\022\000\022\000\026\000\030\bv\000\"\000\194\007\142\000\198\000*\b~\0012\000.\002\217\000\202\000\210\0002\0006\006V\000\250\t\002\002B\003\250\000:\000>\000\254\001\002\004\018\004F\000B\006Z\003\165\003\133\000J\004N\0032\004V\004b\004\130\004\142\004\146\004\238\000~\004\154\004\174\002B\003i\002-\000\130\0036\004\194\004\230\004\250\005\014\005\030\002B\0056\000\142\003:\002B\005R\006_\000\146\005Z\003\190\000\218\002B\005f\005v\005\130\005\154\005\194\005\210\000\238\006\006\002B\000\222\006\022\000\014\000\018\006*\000\022\000\026\000\030\003>\000\150\0066\b\138\b\182\000*\006\222\000\242\000.\001Y\006\254\007\006\0002\0006\007\014\001Y\007\026\007\"\007>\000:\000>\000\014\007R\007\158\007\162\001Y\007\182\007\202\007\222\000J\007\250\0032\b\014\b*\b\162\b\174\002\221\001Y\000~\b\226\b\246\b\250\001Y\t\006\000\130\0036\000:\t2\t>\tz\000\000\000\000\002\250\000\142\003:\000\000\000J\000\000\000\146\000\000\000\000\000\218\000\000\000\000\003\n\000\000\000\000\000\000\000\000\000\238\001Y\000\000\000\222\000\000\000\014\000\018\000\000\000\022\000\026\000\030\003>\000\150\000\000\000\000\000\000\000*\000\000\000\242\000.\001]\000\000\000\000\0002\0006\000\000\001]\000\238\000\000\000\000\000:\000>\000\000\000\000\000\000\000\000\001]\000\000\000\000\000\150\000J\000\000\0032\000\000\000\000\000\242\000\000\000\000\001]\000~z\000\000\000\000\004M\000*\000\000\004M\000.\001I\000\000\000\000\0002\0006\001I\004M\004M\000\000\000\000\000:\000>\000\000\004M\000\000\000\000\001I\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\001I\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\000\018\000\218\000\022\000\026\000\030\000\000\006\190\000\000\000\000\000\238\000*\000\000\000\222\000.\001M\000\000\000\000\0002\0006\001M\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\001M\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\001M\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\000\018\000\218\000\022\000\026\000\030\000\000\006z\000\000\000\000\000\238\000*\000\000\000\222\000.\0019\000\000\000\000\0002\0006\0019\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\0019\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\0019\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\000\018\000\218\000\022\000\026\000\030\000\000\006\190\000\000\000\000\000\238\000*\000\000\000\222\000.\001=\000\000\000\000\0002\0006\001=\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\001=\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\001=\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\0049\000\218\0049\0049\0049\000\000\000\000\000\000\000\000\000\238\0049\000\000\000\222\000.\000\000\000\000\000\000\0049\0049\000\197\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\0049\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\000\000\0049\000\000\000\000\000\000\000\000\000\197\0049\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0049\003:\000\000\000\197\000\000\0049\000\000\000\000\0049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\197\000\000\0049\000\000\000\014\000\018\000\000\000\022\000\026\000\030\003>\000\150\000\000\000\000\000\000\000*\000\000\000\242\000.\002\217\000\000\000\000\0002\0006\000\000\000\000\000\000\000\000\000\000\000:\000>\000\000\000\000\000\000\000\000\003\210\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\003\202\000~\000\000\000\000\000\000\003i\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\000\018\000\218\000\022\000\026\000\030\000\000\000\000\000\000\000\000\000\238\000*\000\000\000\222\000.\001q\000\000\000\000\0002\0006\001q\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\001q\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\001q\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\000\018\000\218\000\022\000\026\000\030\000\000\000\000\000\000\000\000\000\238\000*\000\000\000\222\000.\001y\000\000\000\000\0002\0006\001y\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\001y\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\001y\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\000\018\000\218\000\022\000\026\000\030\000\000\000\000\000\000\000\000\000\238\000*\000\000\000\222\000.\001u\000\000\000\000\0002\0006\001u\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\001u\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\001u\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\000\018\000\218\000\022\000\026\000\030\000\000\000\000\000\000\000\000\000\238\000*\000\000\000\222\000.\001}\000\000\000\000\0002\0006\001}\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\001}\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\001}\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\000\000\000\000\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\000\000\000\000\222\000\000\000\014\000\018\000\000\000\022\000\026\000\030\003>\000\150\000\000\000\000\000\000\000*\000\000\000\242\000.\000\000\000\000\000\000\0002\0006\000\000\003y\000\000\000\000\000\000\000:\000>\000\000\000\000\000\000\000\014\003*\000\000\000\000\000\000\000J\000\000\0032\000R\000\000\000\000\000\000\000V\000\000\000~\000Z\000\000\000^\000\000\000\000\000\130\0036\000\000\000\000\000\000\000:\000\000\003\230\000\000\000\142\003:\000b\000\000\000j\000\146\000J\000\000\000\218\000\000\000\000\000\000\000n\000\000\000z\000\000\000\238\000\000\000\000\000\222\005\214\000\000\000\000\000\134\000\000\000\000\000\000\003>\000\150\000\000\000\000\000\000\000\000\000\000\000\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\000\000\000\198\000\238\000\000\000\000\000\000\000\000\000\202\000\210\000\000\000\000\000\000\000\250\000\000\000\150\000\000\000\000\000\000\000\254\001\002\000\242\003\153\000\018\000\000\000\022\000\026\000\030\000\000\006\142\000\000\000\000\000\000\000*\000\000\0012\000\000\000\000\000\000\000\000\0002\0006\000\000\000\000\000\000\000\000\000\000\003\153\000\000\000\000\002\178\000\000\000\000\000B\000\000\000\000\000\000\003\153\000\000\000\000\003\157\000\018\000\000\000\022\000\026\000\030\000~\000\000\000\000\000\000\000\000\000*\000\130\003Y\000\000\000\000\000\000\003Y\0002\0006\003Y\000\142\003Y\000\000\000\000\003\157\000\146\000\000\000\000\000\218\000\000\000B\000\000\003\029\000\000\003\157\003Y\003\153\003Y\000\000\000\222\000\000\000\000\000\000\000~\000\000\003Y\000\000\003Y\003\153\000\130\000\000\000\000\003a\003Y\003\153\000\000\003Y\000\000\000\142\000\000\000\000\000\000\000\000\000\146\000\000\000\000\000\218\000\000\000\000\000\000\000\000\000\000\003ab\000\000\000j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000n\000\000\000z\000\000\000\238\001U\000\000\000\000\005\222\000\000\002\189\000\134\000\000\000\000\000\000\003>\000\150\002\189\000\000\000\000\000\000\000\000\000\242\000\000\002\189\002\189\000\000\000\000\000\000\000\000\002\189\000\194\000\000\000\198\000\000\002\189\002\189\000\000\000\000\000\202\000\210\002\189\000\000\000\000\000\250\002\189\000\000\002\189\000\000\000\014\000\254\001\002\000\000\002\189\000\000\000\000\006jj\000\000\000\000\000\000\000\000\0036\000\000\000.\0011\000\000\000\000\000\000\000\000\0011\003:\000\000\000\000\000\000\000:\000>\000\000\000\000\000\000\000\000\0011\000\000\000\000\000\000\000J\000\238\0032\000\000\000\000\000\000\000\000\000\000\0011\000\000\000\000\000\000\003>\000\150\000\000\000\000\0036\000\000\000\000\000\242\000\000\000\000\000\014\000\000\000\000\003:\000\000\000\000\000\000\006\174\000\000\000\000\000\000\000\000\000\000\000\000\000.\0015\000\000\000\000\000\238\000\000\0015\000\000\000\000\000\000\000\000\000:\000>\000\000\000\000\003>\000\150\0015\000\000\000\000\000\000\000J\000\242\0032\000R\000\000\000\000\000\000\000V\0015\000\000\000Z\000\000\000^\000\000\000\000\b.\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003:\000b\000\000\000j\000\000\000R\000\000\000\000\000\000\000V\000\000\000n\000Z\000z\000^\000\238\000\000\000\000\bf\000\000\000\000\000\000\000\134\000\000\000\000\000\000\003>\000\150\000b\000\000\000j\000\000\000\000\000\242\000\000\000\000\000\000\000\000\000n\000\000\000z\000\000\000\194\000\000\000\198\000\000\000\000\000\000\000\000\000\134\000\202\000\210\000\000\000\000\000\000\000\250\000\000\000\000\000\000\000\000\000\000\000\254\001\002\000\000\000\000\000\000\000\000\000\000\000\000\000\194\000\000\000\198\000R\000\000\000\000\000\000\000V\000\202\000\210\000Z\000\000\000^\000\250\000\000\000\000\000\000\000\000\000R\000\254\001\002\000\000\000V\000\000\000\000\000Z\000b\000^\000j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000n\000\000\000r\000\000\000\000\000b\000\000\000j\000\000\000\000\000\014\000\134\000\000\000\000\000\000\000n\000\000\000\138\000\000\000\000\000\000\000\000\000\000\000\000\000.\001a\000\134\000\000\000\000\000\000\001a\000\194\000\000\000\198\000\000\000:\000>\000\000\000\000\000\202\000\210\001a\000\000\000\000\000\250\000J\000\194\0032\000\198\000\014\000\254\001\002\000\000\001a\000\202\000\210\000\000\000\000\000\000\000\250\000\000\0036\000\000\000.\001i\000\254\001\002\000\000\000\000\001i\003:\000\000\000\000\000\000\000:\000>\000\000\000\000\000\000\000\014\001i\000\000\000\000\000\000\000J\000\238\0032\000\000\000\000\000\000\000\000\000\000\001i\000.\001e\000\000\003>\000\150\000\000\001e\0036\000\000\000\000\000\242\000:\000>\000\000\000\000\000\000\003:\001e\000\000\000\000\000\000\000J\000\000\0032\000\000\000\014\000\000\000\000\000\000\001e\000\000\000\238\000\000\000\000\000\000\000\000\000\000\0036\000\000\000.\001m\000\000\003>\000\150\000\000\001m\003:\000\000\000\000\000\242\000:\000>\000\000\000\000\000\000\000\000\001m\000\000\000\000\000\000\000J\000\238\0032\000\000\000\000\000\000\000\000\000\000\001m\000\000\000\000\000\000\003>\000\150\000\000\000\000\0036\000\000\000\000\000\242\000\000\000\000\000\000\000\000\000\000\003:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003>\000\150\000\000\000\000\000\000\000\000\000\000\000\242"))
  
  and lhs =
    (8, "\000\140\140\140\139\139\139\138\138\137\137\136\136\135\135\134\134\134\134\133\133\133\132\132\131\131\130\129\129\128\128\127~~}}}}}}}}}}}||||{{zzzyxxwwvuutsssrrrqqpppppoooonnnnmmmmllllllllkjjiihgfedccbaaaa`````_^^]\\\\[[ZZYYXXWWVUUTSSRRQQQQPPOOONNMMLKKJJIIHHGGGFFFFEDDDCCCCCBBAA@@??>>==<;;:::99887766554433221100//..--,,++**))((''&&%%$$##\"\"!!!!!!!!!!!    \031\031\030\030\030\030\029\029\029\029\029\029\029\029\028\027\027\027\026\026\025\025\024\024\024\024\023\023\023\023\022\022\022\021\021\021\021\021\021\021\020\019\019\019\019\018\018\017\017\016\016\015\015\014\014\r\r\012\012\011\011\011\011\n\t\b\b\007\007\007\006\006\006\006\006\006\006\006\006\006\006\006\005\004\004\003\002\002\002\002\002\002\002\001\001\001\001\001\001")
  
  and goto =
    ((16, "\000\003\000\000\b\220\000\000\000\000\000\000\000\000\000\000\000\127\000\170\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\130\000\000\000\000\000\000\000B\000\000\000\000\000\000\000\000\0076\000\000\007\220\000\000\000\000\000N\b\130\000\000\000\221\000\000\000\000\001\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\172\003\130\000\000\000\000\016\162\000\000\001F\000\000\000\000\000L\000\000\000\186\000\000\000\000\t(\000\000\000\000\000\000\006\190\000m\004F\000\000\000\000\000\000\000Q\001\134\000\000\000\016\bN\000\000\018\152\001\002\000\000\000\000\000\000\000\000\000\000\000$\000\000\n\228\000\151\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\n\0006\000\000\000\000\003\b\000\007\000\000\000\000\000\000\003\222\000\000\000\000\000_\000\000\000\000\000*\000\007\000\156\000\000\000\000\000\000\000\000\002\250\0006\000_\000\000\012\234\000\000\020\134\000\000\011\136\000\000\r\158\000j\000\000\000\000\001F\000\156\000\000\002l\000j\000\000\000\000\000\000\000\000\017Z\000\000\000\000\018\176\000\000\000\000\020n\000\000\000\000\000\000\000\000\000\000\000\000\017\170\000\000\r:\000\000\000\000\000\000\000\238\000\000\000\000\000\000\000\000\001,\000\000\000\000\000\000\000\000\000\130\000\186\000\000\000\000\000\218\004F\000\000\000\000\000\000\002\222\000\136\000\186\000\232\004F\000\000\000\000\001\254\0016\000\000\000\000\000\000\001~\001f\000\000\001\194\001\194\000\000\000P\020<\000\000\000\000\000\000\000\000\000\000\000\000\0014\000\t\000\000\000\000\000\000\000\000\001B\004v\000\000\000\000\000\000\000\000\000\000\000\000\003\252\004\152\000\000\005\206\000\000\006\204\000\000\000\000\005:\001B\000\t\001\\\004v\001\172\000\000\000\000\020\230\000\000\000\000\002\232\000l\001V\0016\000\000\000\000\002\014\n0\000\000\000\000\000\000\000\000\000\000\002L\001\194\000\000\000\166\001V\000\000\000\000\000\000\000\000\000\000\002j\n\138\000\000\000\000\000;\000\000\000+\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\214\002p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\172\000\000\000\000\018\220\000\000\000\000\000\000\000\000\000\000\000\186\000\000\005r\003\012\000\186\001n\004F\000\000\000\000\006\164\001p\018f\000\000\003F\001\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\240\000\224\000\000\001>\019d\000\000\000\000\002,\000\000\000\000\000\000\000\000\000\000\007\252\000\000\000\000\000\000\000\000\r\138\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\208\000\000\000\000\0020\000\000\004&\000\000\001\156\005\000\000\000\000\000\019|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\004\r\242\005\026\001\188\000\030\014B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\206\000\000\000\000\000\000\000\000\000\000\000\000\004z\000\000\000\000\000\000\000\000\000\000\000\000\002\004\000\t\002\016\004v\000\000\000\000\000\000\002\"\000\t\002*\000\t\0024\004v\002F\004v\000\000\000\000\007\128\002b\005\018\002h\000\t\002\138\004v\002\144\000\t\002\156\000\t\002\162\004v\002\200\004v\000\002\000\000\002(\000\003\011.\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002l\000\000\000\000\000\000\001\200\000\000\000\000\019\202\000\000\002d\000\000\000\000\002J\002x\002\134\000\000\000\000\000\000\003n\002\152\001F\002\238\000\000\000\000\000\000\000&\000\000\003\142\000\000\014\146\000\000\000\000\000\000\003@\000\000\001\186\000\000\000\000\003\148\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000)\000\000\014\250\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\156\000\000\000\000\000\000\000\000\000\000\000\000\015J\000\000\0048\000\000\000\000\015\154\000\000\003\146\004\212\000\000\000\000\000\000\000\252\000\000\003P\000\t\003T\004v\000\000\007\132\003^\000\t\003l\004v\000\000\011\226\0122\000\000\005p\000\000\000\000\000\000\000\000\000\000\006\172\000\000\005\004\000\000\000\000\000\000\000\000\000\000\000\000\003\214\000\000\000\000\000\000\000u\000\000\003\186\000\158\000\000\016\002\000\000\000\000\000\000\000\000\000\000\006\012\000\000\006\168\000\000\000\000\000\000\016R\000\000\000\000\000\000\000\000\003P\000\000\000\000\000\000\000\000\000\000\000\000\tJ\000\000\000\000\005\170\000\000\000\000\003\188\000<\003~\000\t\003\130\004v\007\188\003\130\000\t\003\136\004v\000\000\005\210\000\000\000\000\b*\000\000\003\226\000\000\003\192\000\000"), (16, "\000O\000X\002D\000\211\000\n\002\015\000\223\000\197\0028\000\002\000D\000G\000H\001e\001\015\000\212\002/\000Q\000\224\002\017\002E\000-\000O\000P\000L\000e\001\235\001\236\002\018\001\179\000u\000S\000T\002S\000O\001\143\002U\000\223\001\b\000Q\000O\001\137\000G\000H\0020\001\242\000:\0025\001\007\000\224\000d\000Q\000h\000S\000T\000m\002;\000Q\000i\002W\000}\000\127\000\003\001K\001{\000S\000T\001\244\000\202\001\245\001\246\000S\000T\000:\000\143\002=\000:\001\247\000\213\000;\000t\000\226\000\244\000I\001\015\001\250\001\251\000\142\001\146\000\133\000s\001\148\000\211\000\181\001\014\001\015\000V\000G\000H\002\\\000\176\001*\001\016\001\015\000\212\001\021\000\175\002!\000z\000\185\002*\001\003\000\226\001~\002F\001\128\000\146\001\252\000o\002I\000\214\002G\000-\000\228\000\181\000\150\001\253\000O\000X\002\r\000O\000P\002\015\000\223\001\004\000\141\001+\000|\000G\000H\000o\002]\000\136\002`\000Q\000\224\002\017\000Q\000-\001\216\001\217\000\197\000e\002b\002d\002\018\001&\000u\000S\000T\001K\000S\000T\002\023\000O\000P\0009\000\213\000\170\000C\001\006\0014\001G\000\179\000\209\000G\000H\000\215\000\223\000\181\000\187\000Q\001\b\000G\000H\000i\001;\000}\000\127\000e\000\224\001\r\001\007\001.\000\137\000S\000T\000\165\000-\001\006\000\231\000\143\0022\001\015\0012\000\236\000\238\000\246\000\226\000\214\001R\002\024\001=\002\031\000\142\000\193\000\133\000\177\000\247\000\196\000\181\000\210\000i\000.\000/\001_\001d\000\216\000\233\000O\000X\000-\000\176\000:\002!\001\021\000\254\002*\000J\001\226\000\235\0027\000\237\000\146\000\197\000o\000Q\0018\000\167\002C\000\228\000-\000\150\000\226\000e\001\235\001\236\000\181\001Q\000u\000S\000T\000\141\001p\000|\000\181\000\199\001\b\001\012\001(\001/\000:\000\247\0013\001\242\001\b\001\r\001\007\001\017\001\129\000\242\000-\000o\000-\001\r\001\007\001\017\000i\001\133\000}\000\127\001\214\001\222\001\230\001\217\000\228\001\244\0010\001\245\001\246\001\006\000|\000:\000\143\000\249\001+\001\247\000O\000X\000-\001\019\000O\000P\000-\001\250\001\251\000\142\000:\000\133\000\176\000\197\000\200\001\001\001f\000Q\001\147\001I\001\234\000Q\001\181\001\149\001\007\000e\001\235\001\236\001\000\000e\000u\000S\000T\001\154\000u\000S\000T\001\156\000\146\001\252\000o\001\158\000\177\001\n\001\b\001\242\001\227\000\150\001\253\001P\001\160\001s\000\247\001\r\001\007\001.\000-\000\141\000i\000|\000}\000\127\000i\000\184\000:\001\165\000\186\001\244\001\167\001\245\001\246\000-\000G\000H\000\143\000O\000P\001\247\000O\000X\000-\001\191\000O\000P\001\169\001\250\001\251\000\142\001\171\000\133\002H\000:\000Q\000\140\001\173\000Q\001\175\001\026\001\241\000Q\000{\000\200\001\027\000e\001\235\001\236\000S\000T\000u\000S\000T\001\007\000\247\000S\000T\001\177\000\146\001\252\000o\001\207\000:\001\023\000o\001\242\0016\000\150\001\253\001K\001w\000\177\001\024\000.\000/\000i\001c\000\141\000i\000|\000}\000\127\000i\000|\001\206\000O\001X\001\244\001\212\001\245\001\246\001\205\001\209\001\132\000\143\001@\000\181\001\247\000O\000X\000-\001\231\000Q\001\b\001\028\001\250\001\251\000\142\001\218\000\133\001\029\001\229\001\r\001\007\001\030\000Q\000S\000T\001\249\001~\002\007\001\128\000\223\000e\001\235\001\236\002\014\002\016\000u\000S\000T\000O\000P\002\020\000\224\000o\000\146\001\252\000o\002\022\0021\002R\000o\001\242\000\229\000\150\001\253\001\031\000Q\002T\002V\002Y\000\223\002[\000|\000\141\000i\000|\000}\000\127\002c\000p\000S\000T\000\224\001\244\000\000\001\245\001\246\000-\002+\000\000\000\143\000\000\000\230\001\247\000O\000X\000-\001\214\001\224\001\230\001\217\001\250\001\251\000\142\000\000\000\133\000E\000F\000\000\000\197\000\000\000Q\000G\000H\002\002\000\226\000\000\002-\0026\000e\001\235\001\236\000\180\000\000\000u\000S\000T\000O\000P\000\000\000\217\000\218\000\146\001\252\000o\000\000\000G\000H\000\000\001\242\001\b\000\150\001\253\000\219\000Q\000\226\0020\000\000\000\223\0025\001\007\000\141\000i\000|\000}\000\127\001\016\002d\000S\000T\000\224\001\244\001h\001\245\001\246\000\000\000\000\000n\000\143\000\000\000\225\001\247\000O\000X\000-\001i\001k\001l\000\000\001\250\001\251\000\142\000\000\000\133\000\000\001r\000\000\000\228\000\000\000Q\000\000\000\000\002\b\000\000\000\181\000\000\000-\000e\001\235\001\236\002$\000\000\000u\000S\000T\001\166\000\220\000\000\001\168\000\211\000\146\001\252\000o\000\000\000G\000H\000\000\001\242\000\181\000\150\001\253\000\212\000\000\000\226\000\182\000\232\000\000\000\000\000\234\000\141\000i\000|\000}\000\127\000G\000H\000\221\000\000\000\000\001\244\000\000\001\245\001\246\000\000\000\000\001\140\000\143\000\000\000\222\001\247\000O\000X\000-\0015\001K\001w\0017\001\250\001\251\000\142\000\197\000\133\000G\000H\000\000\000\228\000\000\000Q\000\000\000\000\002\028\001h\000\000\000\000\000\000\000e\001\235\001\236\001y\000\000\000u\000S\000T\000\000\000\213\001k\001l\000\000\000\146\001\252\000o\001\b\000\000\000\000\001o\001\242\000\181\000\150\001\253\002%\001\r\001\007\002&\000\223\001~\000\000\001\128\000\141\000i\000|\000}\000\127\000\000\000\000\000\000\000\224\000\181\001\244\000\000\001\245\001\246\000\000\002O\000\000\000\143\000\227\000\214\001\247\000O\000X\000-\000\000\000\000\000\000\000\000\001\250\001\251\000\142\000\000\000\133\000\000\000\000\002^\000\197\000\181\000Q\000\000\000\000\002:\000\000\000\000\002-\0026\000e\001\235\001\236\000\000\000\000\000u\000S\000T\000\000\000\000\000\197\000\000\000\000\000\146\001\252\000o\000\000\000\000\002-\0026\001\242\001\b\000\150\001\253\000\000\000\226\000\000\002Q\000\000\000\000\0025\001\007\000\141\000i\000|\000}\000\127\000\000\000\000\000\000\000\000\001\b\001\244\000\000\001\245\001\246\000\000\0020\000\000\000\143\0025\001\007\001\247\000O\000X\000-\000\000\000\000\002\"\002'\001\250\001\251\000\142\000\000\000\133\000\000\0009\000\228\000\000\000C\000Q\0014\0019\002<\000\000\000G\000H\000\223\000e\001\235\001\236\000\000\000\000\000u\000S\000T\001;\000\000\000\000\000\224\000\000\000\146\001\252\000o\002(\000\000\000\000\000\247\001\242\000\229\000\150\001\253\000\000\000\000\0012\001A\000\000\000\000\000\000\000\000\000\141\000i\000|\000}\000\127\001>\000\000\000\000\000\000\000\197\001\244\000\000\001\245\001\246\000O\000X\0009\000\143\000\000\000C\001\247\0014\001\141\000\000\000\000\000G\000H\000\000\001\250\001\251\000\142\000Q\000\133\000\000\000\000\000\000\001;\001\012\000\000\000e\001\b\000\000\000\226\000\000\000u\000S\000T\000\181\002%\001\r\001\007\002&\000\000\001\170\0012\002\019\001\174\000\000\002\021\000\146\001\252\000o\000G\000H\000G\000H\000\000\000\000\000\150\001\253\000\000\000\000\000i\000\000\000}\000\127\000\000\000\000\000\141\001B\000|\000\000\000\000\002X\000\228\000\000\002Z\000\000\000\143\000\000\000\000\000\000\000G\000H\000\000\000\000\000\000\000O\000X\0009\001\135\000\142\000C\000\133\0014\001\138\000\000\000\181\000G\000H\000\000\000\000\000\000\000\000\000Q\0009\000\000\000\000\000C\001;\0014\001V\000e\000\000\000G\000H\000\000\000u\000S\000T\000\146\000\000\000o\000\000\000\000\001;\000\000\0012\002S\000\150\000\000\002U\000\223\000\000\000\181\000\000\000\181\000G\000H\000\141\000\000\000|\000\000\0012\000\224\000i\000\174\000}\000\127\000\178\000\000\000\183\000\000\000\000\002W\000G\000H\000\000\000\000\000\000\000\188\000\143\000\000\000\189\000\181\000\000\000\000\000\190\000\000\000\000\000O\000X\0009\001\135\000\142\000C\000\133\0014\001t\000\000\000\181\000G\000H\000\000\0012\000\000\000\000\000Q\000\000\000\000\000\000\000\000\001;\000\000\002a\000e\000\181\000\000\000\000\000\000\000u\000S\000T\000\146\000\000\000o\000\000\000\226\000\000\000\000\0012\000\000\000\150\000\000\000\000\000\000\000\000\001\153\000\000\000\181\001\157\000\223\000\141\000\000\000|\001\161\000G\000H\000i\000\000\000}\000\127\000\000\000\224\001\162\000\000\002]\000\181\000\000\000\000\000\000\000\000\000\000\001\163\000\143\000\000\000\000\000\000\000\000\000\228\000\000\000\000\000\000\000O\000X\0009\001\135\000\142\000C\000\133\0014\001C\000\000\000\181\000G\000H\000\000\000\000\000\000\000\000\000Q\000\000\000\000\002\"\002'\001;\000\000\000\000\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\146\000\000\000o\000\000\000\000\000\000\000\000\0012\000\000\000\150\000\226\001\178\002J\000\000\000\000\000\000\000\000\000\000\000\000\000\141\000\000\000|\000\181\002L\000\000\000i\000\000\000}\000\127\000\000\000\000\000\000\000\000\000O\000X\001Y\002K\000\000\002N\000\000\000\000\000\143\002e\000\000\000\000\000\000\000\000\000\000\000\197\000\000\000Q\000\000\000\228\000\000\000\142\000\000\000\133\000\000\000e\000\000\000\181\000\000\000\000\000u\000S\000T\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\b\000\000\000\000\000\000\000\146\000\000\000o\001]\002%\001\r\001\007\002&\000i\000\156\000}\000\127\000\000\000\000\000\000\000\000\000O\000X\001E\000\141\000\000\000|\000\176\000\000\000\143\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000\142\000\000\000\133\000\000\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\000\000\000\000\000\000\000\000\000\000\251\000\000\000\000\000\000\000\000\000\000\000\000\000O\000X\000\000\000\000\000\000\000\146\000\176\000o\000\000\000\000\000\000\000\000\000\000\000i\000\156\000}\000\127\000Q\000\000\000\000\000\000\000\000\000\000\000\157\000\141\000e\000|\000\000\000\000\000\143\000u\000S\000T\000\000\000\000\000\000\000\000\000\000\001\011\000\000\000\000\000\000\000\142\000\000\000\133\000O\000X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000i\000\000\000}\000\127\000Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000e\000\146\000\000\000o\000\143\000u\000S\000T\000\177\000\000\000\252\000\000\000O\000X\000\000\000\000\000\000\000\142\000\000\000\133\000\141\000\000\000|\000\000\000\000\000\000\000\000\000\000\000\154\000Q\000\000\000\000\000\000\000i\000\000\000}\000\127\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\000\000\146\000\000\000o\000\143\000\000\000\000\000\000\000\177\000\000\000\252\000\000\000O\000P\000\000\000\000\000\000\000\142\001\183\000\133\000\141\000\000\000|\000\000\000\000\000i\000\000\000}\000\127\000Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000e\000\000\000\000\000\000\000\143\000u\000S\000T\000\000\000\146\000\000\000o\000\000\000\000\000\000\000\000\000\000\000\142\000\156\000\133\000O\000X\000\000\000\000\000\000\000\000\000\000\000\157\000\141\000\000\000|\000\000\000\000\000i\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000e\000\146\000\000\000o\001\185\000u\000S\000T\000\000\000\000\001}\002\025\000\000\000\000\000\000\000O\000X\000\131\000\000\000\133\000\141\000\000\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000i\000\000\000}\000\127\000\000\000\000\000\000\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000o\000\143\000\000\000\000\002\027\000\000\000\000\000O\000X\000\000\000\000\000\000\000\000\002\031\000\142\000\000\000\133\000\141\000\000\000|\000\000\000\000\000\000\000\000\000Q\000i\000\000\000}\000\127\000\000\000\000\000\000\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\000\000\143\000\000\000\146\000\000\000o\000\000\000\000\000\000\000\000\000\000\000\000\000\150\002\029\000\142\000\000\000\133\000\000\000\000\000O\000X\000\000\000\141\000\000\000|\000i\000\000\000}\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000\000\000\143\000\000\000\146\000e\000o\000\000\000\000\000\000\000u\000S\000T\000\150\000\000\000\142\000\000\000\133\000\000\000\000\000O\000X\000\000\000\141\000\000\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000i\000\000\000}\000\127\000\000\000\000\000\146\000e\000o\000\000\000\000\000\000\000u\000S\000T\000\156\000\143\000\000\000\000\000\000\000\000\000\000\000O\000X\001\144\000\141\000\000\000|\000\144\000\142\000\000\000\133\000O\000P\000\000\000\000\000\000\000\000\000\000\000Q\000i\000\000\000}\000\127\000\000\000\000\000\000\000e\000\000\000Q\000\000\000\000\000u\000S\000T\000\000\000\143\000e\000\146\000\000\000o\000\000\000u\000S\000T\000\000\000\000\000\150\000\161\000\142\000\000\000\133\000\000\000\000\000O\000X\000\000\000\141\000\000\000|\000i\000\000\000}\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000i\000Q\000\000\000\000\000\000\000\000\000\143\000\000\000\146\000e\000o\000\000\000\000\000\000\000u\000S\000T\000\150\000\000\000\142\000\000\000\133\000\000\000\000\000O\000X\000\000\000\141\000\000\000|\000\000\000\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000i\000\000\000}\000\127\000\000\000\000\000\146\000e\000o\000\000\000\000\000\000\000u\000S\000T\000\156\000\143\000\000\000o\000\000\000\000\000\000\000O\000X\001[\000\141\000\000\000|\000\000\000\142\000\000\000\133\000\000\000\000\000\000\000\138\000\000\000|\000\000\000Q\000i\000\000\000}\000\127\000\000\000\000\000\000\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\000\000\143\000\000\000\146\000\000\000o\001\131\000\000\000\000\000\000\000\000\000\000\001}\000\000\000\142\000\000\000\133\000\000\000\000\000O\000X\000\000\000\141\000\000\000|\000i\000\000\000}\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000\000\000\143\000\000\000\146\000e\000o\001|\000\000\000\000\000u\000S\000T\001}\001\220\000\142\000\000\000\133\000\000\000\000\000O\000X\000\000\000\141\000\000\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000i\000\000\000}\000\127\000\000\000\000\000\146\000e\000o\000\000\000\000\000\000\000u\000S\000T\000\150\000\143\000\000\000\000\000\000\000\000\000\000\000O\000X\000\000\000\141\000\000\000|\001\239\000\142\000\000\000\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000i\000\000\000}\000\127\000\000\000\000\000\000\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\000\000\143\000\000\000\146\000\000\000o\000\000\000\000\000\000\000\000\000\000\000\000\000\150\002\000\000\142\000\000\000\133\000\000\000\000\000O\000X\000\000\000\141\000\000\000|\000i\000\000\000}\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000\000\000\143\000\000\000\146\000e\000o\000\000\000\000\000\000\000u\000S\000T\000\150\002\005\000\142\000\000\000\133\000\000\000\000\000O\000X\000\000\000\141\000\000\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000i\000\000\000}\000\127\000\000\000\000\000\146\000e\000o\000\000\000\000\000\000\000u\000S\000T\000\150\000\143\000\000\000\000\000\000\000\000\000\000\000O\000X\000\000\000\141\000\000\000|\000\000\000\142\000\000\000\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000i\000\000\000}\000\127\000\000\000\000\000\000\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\000\000\143\000\000\000\146\000\000\000o\0024\000\000\000\000\000\000\000\000\000\000\001}\002@\000\142\000\000\000\133\000\000\000\000\000O\000X\000\000\000\141\000\000\000|\000i\000\000\000}\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000\000\000\143\000\000\000\146\000e\000o\000\000\000\000\000\000\000u\000S\000T\000\150\000\000\000\142\000\000\000\133\000\000\000\000\000O\000X\000\000\000\141\000\000\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000i\000\000\000}\000\127\000\000\000\000\000\146\000e\000o\000\000\000\000\000\000\000u\000S\000T\001T\000\143\000\000\000\000\000\000\000\000\000\000\000O\000X\000\000\000\141\000\000\000|\000\000\000\142\000\000\000\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000i\000\000\000}\000\127\000\000\000\000\000\000\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\000\000\143\000\000\000\146\000\000\000o\000\000\000\000\000\000\000\000\000\000\000\000\000\153\000\000\000\142\000\000\000\133\000\000\000\000\000\000\000\000\000\000\000\141\000\000\000|\000i\000\000\000}\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\143\000\000\000\146\000\000\000o\000\000\000\000\000\000\000\000\000\000\000\000\000\147\000\000\000\142\000\000\000\133\000\000\000\000\000\000\000\000\000\000\000\141\000\209\000|\000\000\000\215\000\223\000\000\000\000\000\000\000\000\000G\000H\000\000\000\000\000\000\000\000\000\000\000\224\000\000\000\000\000\000\000\146\000\000\000o\000O\000P\000\000\000\231\000\000\000\000\000\159\000\000\000\236\000\238\000\246\000\000\000O\000P\000\000\000\000\000\141\000Q\000|\000\000\000\000\000\247\000\000\000\000\000\000\000e\000\000\000\000\000\000\000Q\000u\000S\000T\000\000\000O\000P\000\000\000e\000\000\001>\000\000\000\000\000u\000S\000T\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000\000\000\226\000\000\000i\000e\000}\000\127\000\000\000\000\000u\000S\000T\000\000\000\181\000\000\000i\001\012\000}\000\127\000\143\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\242\000\000\000\000\000\143\000\142\000\000\000\133\000\000\000\000\000i\000\000\000}\000\127\000\000\000\000\000\228\000\142\000\000\000\133\000O\000P\000\000\000\000\000\000\000\000\000\143\000\000\000\000\000\000\000\000\001\019\000O\000P\000\168\000\000\000o\000Q\000\000\000\142\000\000\000\133\000\000\000\000\000\000\000e\000\149\000\000\000o\000Q\000u\000S\000T\000\141\000\000\000|\000\000\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\141\000\000\000|\001-\000\000\000o\000O\000P\000\000\000\000\000\000\000\000\000\000\000i\000\000\000}\000\127\000\000\000\000\000\000\000\000\000\000\000\141\000Q\000|\000i\000\000\000}\000\127\000\143\000\000\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\000\000\000\000\143\000\142\000\000\000\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\000\000\000\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000i\000\209\000}\000\127\000\215\000\223\000\000\001M\000\000\000o\000G\000H\000\000\000\000\000\000\000\000\000\143\000\224\000\000\001n\000\000\000o\000\000\000\000\000O\000P\000\141\000\231\000|\000\142\000\000\000\133\000\236\000\238\000\246\000\000\000O\000P\000\141\000\000\000|\000Q\000\000\001 \000\000\000\000\000\000\000\000\000\000\000e\000\000\000\000\000\000\000Q\000u\000S\000T\000\000\001\198\000\000\000o\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\000\000\000\000\000\000\000\000\000\000\000\001\"\000\000\000\141\000\000\000|\000\226\000\000\000i\000\000\000\000\000\152\000\209\000\000\000\000\000\215\000\223\000\000\000\181\000\000\000i\000G\000H\000\000\000\143\000\000\000\000\000\000\000\224\000\000\000\000\000\000\000\000\000\242\000\000\000\000\000\129\000\142\000\231\000\133\000\000\000\000\000\000\000\000\000\000\000\241\000\000\000\000\000\228\000\142\000\000\000\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000o\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000o\000\000\000\000\000\000\000\000\000\141\000\000\000|\000\000\000\000\000\000\000\226\000\000\000\000\000\000\000\000\000\000\000\141\000\000\000|\000\000\000\000\000\000\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\228"))
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_option_type_qualifier_list_ = Obj.magic _2 in
        let _1_inlined1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 972 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_abstract_declarator_parameter_declaration_ = let _1 =
          let _2 = 
# 707 "cparser/pre_parser.mly"
    ()
# 982 "cparser/pre_parser.ml"
           in
          
# 711 "cparser/pre_parser.mly"
    ()
# 987 "cparser/pre_parser.ml"
          
        in
        
# 747 "cparser/pre_parser.mly"
    ()
# 993 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : 'tv_direct_abstract_declarator = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_abstract_declarator_parameter_declaration_ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 1018 "cparser/pre_parser.ml"
         in
        
# 747 "cparser/pre_parser.mly"
    ()
# 1023 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_direct_abstract_declarator = Obj.magic _2 in
        let _2_inlined1 : 'tv_option_type_qualifier_list_ = Obj.magic _2_inlined1 in
        let _1_inlined1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1064 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_abstract_declarator_parameter_declaration_ = let _1 =
          let x =
            let _2 = 
# 707 "cparser/pre_parser.mly"
    ()
# 1075 "cparser/pre_parser.ml"
             in
            
# 711 "cparser/pre_parser.mly"
    ()
# 1080 "cparser/pre_parser.ml"
            
          in
          
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 1086 "cparser/pre_parser.ml"
          
        in
        
# 747 "cparser/pre_parser.mly"
    ()
# 1092 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_option_type_qualifier_list_ = Obj.magic _2 in
        let _1_inlined1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1126 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_abstract_declarator_type_name_ = let _1 =
          let _2 = 
# 707 "cparser/pre_parser.mly"
    ()
# 1136 "cparser/pre_parser.ml"
           in
          
# 711 "cparser/pre_parser.mly"
    ()
# 1141 "cparser/pre_parser.ml"
          
        in
        
# 747 "cparser/pre_parser.mly"
    ()
# 1147 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : 'tv_direct_abstract_declarator = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_abstract_declarator_type_name_ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 1172 "cparser/pre_parser.ml"
         in
        
# 747 "cparser/pre_parser.mly"
    ()
# 1177 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_direct_abstract_declarator = Obj.magic _2 in
        let _2_inlined1 : 'tv_option_type_qualifier_list_ = Obj.magic _2_inlined1 in
        let _1_inlined1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1218 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_abstract_declarator_type_name_ = let _1 =
          let x =
            let _2 = 
# 707 "cparser/pre_parser.mly"
    ()
# 1229 "cparser/pre_parser.ml"
             in
            
# 711 "cparser/pre_parser.mly"
    ()
# 1234 "cparser/pre_parser.ml"
            
          in
          
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 1240 "cparser/pre_parser.ml"
          
        in
        
# 747 "cparser/pre_parser.mly"
    ()
# 1246 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_multiplicative_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_additive_expression = 
# 310 "cparser/pre_parser.mly"
    ()
# 1271 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_multiplicative_expression = Obj.magic _3 in
        let _2 : 'tv_additive_operator = Obj.magic _2 in
        let _1 : 'tv_additive_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_additive_expression = 
# 310 "cparser/pre_parser.mly"
    ()
# 1310 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1331 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_additive_operator = 
# 305 "cparser/pre_parser.mly"
               ()
# 1339 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1360 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_additive_operator = 
# 305 "cparser/pre_parser.mly"
               ()
# 1368 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_equality_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_and_expression = 
# 339 "cparser/pre_parser.mly"
    ()
# 1393 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_equality_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1427 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_and_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_and_expression = 
# 339 "cparser/pre_parser.mly"
    ()
# 1436 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_assignment_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_argument_expression_list = 
# 270 "cparser/pre_parser.mly"
    ()
# 1461 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1495 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_argument_expression_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_argument_expression_list = 
# 270 "cparser/pre_parser.mly"
    ()
# 1504 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_asm_arguments = 
# 859 "cparser/pre_parser.mly"
    ()
# 1522 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_asm_operands = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1550 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_asm_arguments = 
# 859 "cparser/pre_parser.mly"
    ()
# 1558 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_asm_operands = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1598 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_asm_operands = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1604 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_asm_arguments = 
# 859 "cparser/pre_parser.mly"
    ()
# 1612 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : 'tv_asm_flags = Obj.magic _6 in
        let _5 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1664 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_asm_operands = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1670 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_asm_operands = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1676 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_asm_arguments = 
# 859 "cparser/pre_parser.mly"
    ()
# 1684 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_asm_attributes = 
# 852 "cparser/pre_parser.mly"
    ()
# 1702 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_asm_attributes = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1730 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_asm_attributes = 
# 852 "cparser/pre_parser.mly"
    ()
# 1738 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_asm_attributes = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1766 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_asm_attributes = 
# 852 "cparser/pre_parser.mly"
    ()
# 1774 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_string_literals_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_asm_flags = 
# 883 "cparser/pre_parser.mly"
    ()
# 1799 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_string_literals_list = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1833 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_asm_flags = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_asm_flags = 
# 883 "cparser/pre_parser.mly"
    ()
# 1842 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_asm_op_name = 
# 878 "cparser/pre_parser.mly"
    ()
# 1860 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1893 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1899 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_asm_op_name = let _2 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 1907 "cparser/pre_parser.ml"
         in
        
# 878 "cparser/pre_parser.mly"
    ()
# 1912 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1957 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_expression = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1963 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_string_literals_list = Obj.magic _2 in
        let _1 : 'tv_asm_op_name = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_asm_operand = 
# 873 "cparser/pre_parser.mly"
    ()
# 1973 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_asm_operands = 
# 864 "cparser/pre_parser.mly"
    ()
# 1991 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_asm_operands_ne = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_asm_operands = 
# 864 "cparser/pre_parser.mly"
    ()
# 2016 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_asm_operand = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2050 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_asm_operands_ne = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_asm_operands_ne = 
# 869 "cparser/pre_parser.mly"
    ()
# 2059 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_asm_operand = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_asm_operands_ne = 
# 869 "cparser/pre_parser.mly"
    ()
# 2084 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2141 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2146 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_asm_arguments = Obj.magic _5 in
        let _4 : 'tv_string_literals_list = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2153 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_asm_attributes = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2159 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_asm_statement = 
# 821 "cparser/pre_parser.mly"
    ()
# 2167 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_conditional_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_expression = 
# 369 "cparser/pre_parser.mly"
    ()
# 2192 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : 'tv_assignment_operator = Obj.magic _2 in
        let _1 : 'tv_unary_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assignment_expression = 
# 369 "cparser/pre_parser.mly"
    ()
# 2231 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2252 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 383 "cparser/pre_parser.mly"
    ()
# 2260 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2281 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 383 "cparser/pre_parser.mly"
    ()
# 2289 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2310 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 383 "cparser/pre_parser.mly"
    ()
# 2318 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2339 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 383 "cparser/pre_parser.mly"
    ()
# 2347 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2368 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 383 "cparser/pre_parser.mly"
    ()
# 2376 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2397 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 383 "cparser/pre_parser.mly"
    ()
# 2405 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2426 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 383 "cparser/pre_parser.mly"
    ()
# 2434 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2455 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 383 "cparser/pre_parser.mly"
    ()
# 2463 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2484 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 383 "cparser/pre_parser.mly"
    ()
# 2492 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2513 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 383 "cparser/pre_parser.mly"
    ()
# 2521 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2542 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 383 "cparser/pre_parser.mly"
    ()
# 2550 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2601 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2606 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_gcc_attribute_list = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2612 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2617 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2622 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_attribute_specifier = 
# 589 "cparser/pre_parser.mly"
    ()
# 2630 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2669 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_argument_expression_list = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2675 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2680 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_attribute_specifier = 
# 589 "cparser/pre_parser.mly"
    ()
# 2688 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2727 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_argument_expression_list = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2733 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2738 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_attribute_specifier = 
# 589 "cparser/pre_parser.mly"
    ()
# 2746 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2785 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2791 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2796 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_attribute_specifier = 
# 589 "cparser/pre_parser.mly"
    ()
# 2804 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_attribute_specifier_list = 
# 582 "cparser/pre_parser.mly"
    ()
# 2822 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_attribute_specifier_list = 
# 582 "cparser/pre_parser.mly"
    ()
# 2854 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declaration_block_item_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_block_item = 
# 806 "cparser/pre_parser.mly"
    ()
# 2879 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_block_item = 
# 806 "cparser/pre_parser.mly"
    ()
# 2904 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 51 "cparser/pre_parser.mly"
      (string * Cabs.loc)
# 2925 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_block_item = 
# 806 "cparser/pre_parser.mly"
    ()
# 2933 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_block_item = Obj.magic _2 in
        let _1 : 'tv_option_block_item_list_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_block_item_list = 
# 800 "cparser/pre_parser.mly"
    ()
# 2965 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_assignment_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_c_initializer = 
# 758 "cparser/pre_parser.mly"
    ()
# 2990 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3029 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_COMMA_ = Obj.magic _3 in
        let _2 : 'tv_initializer_list = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3036 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_c_initializer = 
# 758 "cparser/pre_parser.mly"
    ()
# 3044 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_unary_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cast_expression = 
# 294 "cparser/pre_parser.mly"
    ()
# 3069 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_cast_expression = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3109 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_type_name = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3115 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_cast_expression = 
# 294 "cparser/pre_parser.mly"
    ()
# 3123 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = ctx;
                MenhirLib.EngineTypes.startp = _startpos_ctx_;
                MenhirLib.EngineTypes.endp = _endpos_ctx_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3162 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_block_item_list_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3168 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_compound_statement = 
# 796 "cparser/pre_parser.mly"
    ( ctx() )
# 3177 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_logical_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_conditional_expression = 
# 364 "cparser/pre_parser.mly"
    ()
# 3202 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_conditional_expression = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3248 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3254 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_logical_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_conditional_expression = 
# 364 "cparser/pre_parser.mly"
    ()
# 3263 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ctx2;
          MenhirLib.EngineTypes.startp = _startpos_ctx2_;
          MenhirLib.EngineTypes.endp = _endpos_ctx2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ctx1;
              MenhirLib.EngineTypes.startp = _startpos_ctx1_;
              MenhirLib.EngineTypes.endp = _endpos_ctx1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ctx2 : 'tv_save_context = Obj.magic ctx2 in
        let _2 : 'tv_parameter_type_list = Obj.magic _2 in
        let ctx1 : 'tv_save_context = Obj.magic ctx1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx1_ in
        let _endpos = _endpos_ctx2_ in
        let _v : 'tv_context_parameter_type_list = 
# 719 "cparser/pre_parser.mly"
    ( ctx1 (); ctx2 )
# 3302 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3335 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_init_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_declaration_block_item__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_block_item_ = 
# 409 "cparser/pre_parser.mly"
    ()
# 3345 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3378 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_typedef_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_block_item_ = 
# 409 "cparser/pre_parser.mly"
    ()
# 3388 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_static_assert_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_block_item_ = 
# 409 "cparser/pre_parser.mly"
    ()
# 3413 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3446 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_init_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_declaration_external_declaration__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_external_declaration_ = 
# 409 "cparser/pre_parser.mly"
    ()
# 3456 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3489 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_typedef_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_external_declaration_ = 
# 409 "cparser/pre_parser.mly"
    ()
# 3499 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_static_assert_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_external_declaration_ = 
# 409 "cparser/pre_parser.mly"
    ()
# 3524 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_kr_param_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_list = 
# 913 "cparser/pre_parser.mly"
    ()
# 3549 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_kr_param_declaration = Obj.magic _2 in
        let _1 : 'tv_declaration_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_declaration_list = 
# 913 "cparser/pre_parser.mly"
    ()
# 3581 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_storage_class_specifier_no_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_specifier_no_typedef_name = 
# 455 "cparser/pre_parser.mly"
    ()
# 3606 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_qualifier_noattr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_specifier_no_typedef_name = let _1 = 
# 577 "cparser/pre_parser.mly"
    ()
# 3631 "cparser/pre_parser.ml"
         in
        
# 455 "cparser/pre_parser.mly"
    ()
# 3636 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_specifier_no_typedef_name = let _1 = 
# 577 "cparser/pre_parser.mly"
    ()
# 3661 "cparser/pre_parser.ml"
         in
        
# 455 "cparser/pre_parser.mly"
    ()
# 3666 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_function_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_specifier_no_typedef_name = 
# 455 "cparser/pre_parser.mly"
    ()
# 3691 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_specifier_no_typedef_name = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_specifier_no_typedef_name = 
# 455 "cparser/pre_parser.mly"
    ()
# 3716 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_block_item__ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 3748 "cparser/pre_parser.ml"
         in
        
# 478 "cparser/pre_parser.mly"
    ()
# 3753 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_block_item__ = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 3792 "cparser/pre_parser.ml"
         in
        
# 478 "cparser/pre_parser.mly"
    ()
# 3797 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_block_item__ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 3829 "cparser/pre_parser.ml"
         in
        
# 478 "cparser/pre_parser.mly"
    ()
# 3834 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_block_item__ = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 3873 "cparser/pre_parser.ml"
         in
        
# 478 "cparser/pre_parser.mly"
    ()
# 3878 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_external_declaration__ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 3910 "cparser/pre_parser.ml"
         in
        
# 478 "cparser/pre_parser.mly"
    ()
# 3915 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_external_declaration__ = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 3954 "cparser/pre_parser.ml"
         in
        
# 478 "cparser/pre_parser.mly"
    ()
# 3959 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_external_declaration__ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 3991 "cparser/pre_parser.ml"
         in
        
# 478 "cparser/pre_parser.mly"
    ()
# 3996 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_external_declaration__ = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 4035 "cparser/pre_parser.ml"
         in
        
# 478 "cparser/pre_parser.mly"
    ()
# 4040 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_parameter_declaration_ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 4072 "cparser/pre_parser.ml"
         in
        
# 478 "cparser/pre_parser.mly"
    ()
# 4077 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_parameter_declaration_ = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 4116 "cparser/pre_parser.ml"
         in
        
# 478 "cparser/pre_parser.mly"
    ()
# 4121 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_parameter_declaration_ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 4153 "cparser/pre_parser.ml"
         in
        
# 478 "cparser/pre_parser.mly"
    ()
# 4158 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_parameter_declaration_ = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 4197 "cparser/pre_parser.ml"
         in
        
# 478 "cparser/pre_parser.mly"
    ()
# 4202 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _5 in
        let _4 : 'tv_typedef_name = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4244 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 4252 "cparser/pre_parser.ml"
         in
        
# 488 "cparser/pre_parser.mly"
    ()
# 4257 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _5 in
        let _4 : 'tv_typedef_name = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4305 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 4314 "cparser/pre_parser.ml"
         in
        
# 488 "cparser/pre_parser.mly"
    ()
# 4319 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4359 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 4369 "cparser/pre_parser.ml"
         in
        
# 488 "cparser/pre_parser.mly"
    ()
# 4374 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4420 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 4431 "cparser/pre_parser.ml"
         in
        
# 488 "cparser/pre_parser.mly"
    ()
# 4436 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _5 in
        let _4 : 'tv_type_specifier_no_typedef_name = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4478 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 4486 "cparser/pre_parser.ml"
         in
        
# 488 "cparser/pre_parser.mly"
    ()
# 4491 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _5 in
        let _4 : 'tv_type_specifier_no_typedef_name = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4539 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 4548 "cparser/pre_parser.ml"
         in
        
# 488 "cparser/pre_parser.mly"
    ()
# 4553 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4593 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 4603 "cparser/pre_parser.ml"
         in
        
# 488 "cparser/pre_parser.mly"
    ()
# 4608 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4654 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 4665 "cparser/pre_parser.ml"
         in
        
# 488 "cparser/pre_parser.mly"
    ()
# 4670 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let x : 'tv_declarator_noattrend = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_declarator = 
# 663 "cparser/pre_parser.mly"
    ( x )
# 4702 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 4735 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _2 : 'tv_low_prec = Obj.magic _2 in
        let _1 : (
# 46 "cparser/pre_parser.mly"
      (string)
# 4741 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declarator_identifier = 
# 655 "cparser/pre_parser.mly"
    ( i )
# 4749 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 4776 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 46 "cparser/pre_parser.mly"
      (string)
# 4781 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declarator_identifier = let i = 
# 199 "cparser/pre_parser.mly"
    ( i )
# 4789 "cparser/pre_parser.ml"
         in
        
# 655 "cparser/pre_parser.mly"
    ( i )
# 4794 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_declarator_noattrend = 
# 667 "cparser/pre_parser.mly"
    ( x )
# 4819 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _2 : 'tv_option_type_qualifier_list_ = Obj.magic _2 in
        let _1_inlined1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4860 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_declarator_noattrend = let _1 =
          let _2 = 
# 707 "cparser/pre_parser.mly"
    ()
# 4870 "cparser/pre_parser.ml"
           in
          
# 711 "cparser/pre_parser.mly"
    ()
# 4875 "cparser/pre_parser.ml"
          
        in
        
# 669 "cparser/pre_parser.mly"
    ( match snd x with
      | Decl_ident -> (fst x, Decl_other)
      | _ -> x )
# 4883 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_declarator = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declare_typename_declarator_ = 
# 226 "cparser/pre_parser.mly"
         ( declare_typename (fst i); i )
# 4908 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_declarator = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declare_varname_declarator_ = 
# 224 "cparser/pre_parser.mly"
         ( declare_varname (fst i); i )
# 4933 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_declarator_noattrend = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declare_varname_declarator_noattrend_ = 
# 224 "cparser/pre_parser.mly"
         ( declare_varname (fst i); i )
# 4958 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_enumerator = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declare_varname_enumerator_ = 
# 224 "cparser/pre_parser.mly"
         ( declare_varname (fst i); i )
# 4983 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5010 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_designator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_designation = 
# 767 "cparser/pre_parser.mly"
    ()
# 5019 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5052 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _1_inlined1 : 'tv_conditional_expression = Obj.magic _1_inlined1 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5058 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_designator = let _2 = 
# 392 "cparser/pre_parser.mly"
    ()
# 5066 "cparser/pre_parser.ml"
         in
        
# 776 "cparser/pre_parser.mly"
    ()
# 5071 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5099 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_designator = let _2 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 5107 "cparser/pre_parser.ml"
         in
        
# 776 "cparser/pre_parser.mly"
    ()
# 5112 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_designator = Obj.magic _2 in
        let _1 : 'tv_option_designator_list_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_designator_list = 
# 771 "cparser/pre_parser.mly"
    ()
# 5144 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5183 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_abstract_declarator_type_name_ = Obj.magic _3 in
        let _2 : 'tv_save_context = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5190 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_abstract_declarator = 
# 753 "cparser/pre_parser.mly"
    ()
# 5198 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_optional_assignment_expression_RBRACK_ = Obj.magic _4 in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5239 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_option_direct_abstract_declarator_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_abstract_declarator = 
# 753 "cparser/pre_parser.mly"
    ()
# 5248 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5281 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_context_parameter_type_list_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5287 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_abstract_declarator = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 5295 "cparser/pre_parser.ml"
         in
        
# 753 "cparser/pre_parser.mly"
    ()
# 5300 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5339 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_context_parameter_type_list_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5345 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_direct_abstract_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_abstract_declarator = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 5354 "cparser/pre_parser.ml"
         in
        
# 753 "cparser/pre_parser.mly"
    ()
# 5359 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_declarator_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_direct_declarator = 
# 675 "cparser/pre_parser.mly"
    ( set_id_type i VarId; (i, Decl_ident) )
# 5384 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5423 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let x : 'tv_declarator = Obj.magic x in
        let _2 : 'tv_save_context = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5430 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_declarator = 
# 677 "cparser/pre_parser.mly"
    ( x )
# 5438 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_optional_assignment_expression_RBRACK_ = Obj.magic _4 in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5479 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_declarator = 
# 679 "cparser/pre_parser.mly"
    ( match snd x with
      | Decl_ident -> (fst x, Decl_other)
      | _ -> x )
# 5490 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ctx;
            MenhirLib.EngineTypes.startp = _startpos_ctx_;
            MenhirLib.EngineTypes.endp = _endpos_ctx_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5529 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let ctx : 'tv_context_parameter_type_list = Obj.magic ctx in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5535 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_declarator = 
# 683 "cparser/pre_parser.mly"
    ( match snd x with
      | Decl_ident -> (fst x, Decl_fun ctx)
      | _ -> x )
# 5546 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = il;
            MenhirLib.EngineTypes.startp = _startpos_il_;
            MenhirLib.EngineTypes.endp = _endpos_il_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5591 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let il : 'tv_option_identifier_list_ = Obj.magic il in
        let _3 : 'tv_save_context = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5598 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_direct_declarator = 
# 687 "cparser/pre_parser.mly"
    ( match snd x, il with
      | Decl_ident, Some il -> (fst x, Decl_krfun il)
      | Decl_ident, None -> (fst x, Decl_krfun [])
      | _ -> x )
# 5610 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ctx;
              MenhirLib.EngineTypes.startp = _startpos_ctx_;
              MenhirLib.EngineTypes.endp = _endpos_ctx_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_statement = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5644 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_do_statement1 = 
# 835 "cparser/pre_parser.mly"
    ( ctx () )
# 5653 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5710 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : 'tv_option_COMMA_ = Obj.magic _6 in
        let _5 : 'tv_enumerator_list = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5717 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_other_identifier_ = Obj.magic _3 in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5724 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_enum_specifier = 
# 552 "cparser/pre_parser.mly"
    ()
# 5732 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5767 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_enum_specifier = let _3 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 5775 "cparser/pre_parser.ml"
         in
        
# 552 "cparser/pre_parser.mly"
    ()
# 5780 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_enumeration_constant = 
# 566 "cparser/pre_parser.mly"
    ( set_id_type i VarId; i )
# 5805 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_enumeration_constant = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_enumerator = 
# 562 "cparser/pre_parser.mly"
    ( (i, ()) )
# 5830 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : 'tv_conditional_expression = Obj.magic _1 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5864 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let i : 'tv_enumeration_constant = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_enumerator = let _3 = 
# 392 "cparser/pre_parser.mly"
    ()
# 5873 "cparser/pre_parser.ml"
         in
        
# 562 "cparser/pre_parser.mly"
    ( (i, ()) )
# 5878 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declare_varname_enumerator_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_enumerator_list = 
# 557 "cparser/pre_parser.mly"
    ()
# 5903 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_declare_varname_enumerator_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5937 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_enumerator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_enumerator_list = 
# 557 "cparser/pre_parser.mly"
    ()
# 5946 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_relational_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_equality_expression = 
# 334 "cparser/pre_parser.mly"
    ()
# 5971 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_relational_expression = Obj.magic _3 in
        let _2 : 'tv_equality_operator = Obj.magic _2 in
        let _1 : 'tv_equality_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_equality_expression = 
# 334 "cparser/pre_parser.mly"
    ()
# 6010 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6031 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_equality_operator = 
# 329 "cparser/pre_parser.mly"
             ()
# 6039 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6060 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_equality_operator = 
# 329 "cparser/pre_parser.mly"
             ()
# 6068 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_and_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_exclusive_or_expression = 
# 344 "cparser/pre_parser.mly"
    ()
# 6093 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_and_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6127 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_exclusive_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_exclusive_or_expression = 
# 344 "cparser/pre_parser.mly"
    ()
# 6136 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_assignment_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_expression = 
# 388 "cparser/pre_parser.mly"
    ()
# 6161 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6195 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_expression = 
# 388 "cparser/pre_parser.mly"
    ()
# 6204 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6231 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_option_expression_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_expression_statement = 
# 810 "cparser/pre_parser.mly"
    ()
# 6240 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_optional_expression_SEMICOLON_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_for_statement_header = 
# 846 "cparser/pre_parser.mly"
    ()
# 6265 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declaration_block_item_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_for_statement_header = 
# 846 "cparser/pre_parser.mly"
    ()
# 6290 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ctx;
            MenhirLib.EngineTypes.startp = _startpos_ctx_;
            MenhirLib.EngineTypes.endp = _endpos_ctx_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_compound_statement = Obj.magic _2 in
        let ctx : 'tv_function_definition1 = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_function_definition = 
# 931 "cparser/pre_parser.mly"
    ( ctx () )
# 6322 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ctx;
          MenhirLib.EngineTypes.startp = _startpos_ctx_;
          MenhirLib.EngineTypes.endp = _endpos_ctx_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = func;
                MenhirLib.EngineTypes.startp = _startpos_func_;
                MenhirLib.EngineTypes.endp = _endpos_func_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _4 : 'tv_attribute_specifier_list = Obj.magic _4 in
        let _3 : 'tv_save_context = Obj.magic _3 in
        let func : 'tv_declare_varname_declarator_noattrend_ = Obj.magic func in
        let _1 : 'tv_declaration_specifiers_declaration_external_declaration__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ctx_ in
        let _v : 'tv_function_definition1 = 
# 922 "cparser/pre_parser.mly"
    ( begin match snd func with
      | Decl_fun ctx -> ctx (); declare_varname (fst func)
      | Decl_krfun il -> List.iter declare_varname il
      | _ -> ()
      end;
      ctx )
# 6380 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ctx;
            MenhirLib.EngineTypes.startp = _startpos_ctx_;
            MenhirLib.EngineTypes.endp = _endpos_ctx_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = func;
              MenhirLib.EngineTypes.startp = _startpos_func_;
              MenhirLib.EngineTypes.endp = _endpos_func_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_declaration_list = Obj.magic _4 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let func : 'tv_declare_varname_declarator_noattrend_ = Obj.magic func in
        let _1 : 'tv_declaration_specifiers_declaration_external_declaration__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_function_definition1 = 
# 922 "cparser/pre_parser.mly"
    ( begin match snd func with
      | Decl_fun ctx -> ctx (); declare_varname (fst func)
      | Decl_krfun il -> List.iter declare_varname il
      | _ -> ()
      end;
      ctx )
# 6431 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6452 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_function_specifier = 
# 620 "cparser/pre_parser.mly"
    ()
# 6460 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6481 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_function_specifier = 
# 620 "cparser/pre_parser.mly"
    ()
# 6489 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_gcc_attribute = 
# 600 "cparser/pre_parser.mly"
    ()
# 6507 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_gcc_attribute_word = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_gcc_attribute = 
# 600 "cparser/pre_parser.mly"
    ()
# 6532 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6571 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_argument_expression_list_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6577 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_gcc_attribute_word = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_gcc_attribute = 
# 600 "cparser/pre_parser.mly"
    ()
# 6586 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = i;
                MenhirLib.EngineTypes.startp = _startpos_i_;
                MenhirLib.EngineTypes.endp = _endpos_i_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6637 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_argument_expression_list = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6643 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let i : 'tv_typedef_name = Obj.magic i in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6649 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_gcc_attribute_word = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_gcc_attribute = 
# 605 "cparser/pre_parser.mly"
    ( set_id_type i VarId )
# 6658 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_gcc_attribute = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_gcc_attribute_list = 
# 594 "cparser/pre_parser.mly"
    ()
# 6683 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_gcc_attribute = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6717 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_gcc_attribute_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_gcc_attribute_list = 
# 594 "cparser/pre_parser.mly"
    ()
# 6726 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_gcc_attribute_word = let _1 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 6751 "cparser/pre_parser.ml"
         in
        
# 611 "cparser/pre_parser.mly"
    ()
# 6756 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6777 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_gcc_attribute_word = 
# 611 "cparser/pre_parser.mly"
    ()
# 6785 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6806 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_gcc_attribute_word = 
# 611 "cparser/pre_parser.mly"
    ()
# 6814 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_typedef_name = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_general_identifier = 
# 204 "cparser/pre_parser.mly"
    ( i )
# 6839 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 6866 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 46 "cparser/pre_parser.mly"
      (string)
# 6871 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_general_identifier = let i = 
# 199 "cparser/pre_parser.mly"
    ( i )
# 6879 "cparser/pre_parser.ml"
         in
        
# 204 "cparser/pre_parser.mly"
    ( i )
# 6884 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 6911 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 46 "cparser/pre_parser.mly"
      (string)
# 6916 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_identifier_list = let x = 
# 199 "cparser/pre_parser.mly"
    ( i )
# 6924 "cparser/pre_parser.ml"
         in
        
# 902 "cparser/pre_parser.mly"
    ( [x] )
# 6929 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = l;
                MenhirLib.EngineTypes.startp = _startpos_l_;
                MenhirLib.EngineTypes.endp = _endpos_l_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let i : (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 6968 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 46 "cparser/pre_parser.mly"
      (string)
# 6973 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6978 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let l : 'tv_identifier_list = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_identifier_list = let x = 
# 199 "cparser/pre_parser.mly"
    ( i )
# 6987 "cparser/pre_parser.ml"
         in
        
# 904 "cparser/pre_parser.mly"
    ( x::l )
# 6992 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ctx;
              MenhirLib.EngineTypes.startp = _startpos_ctx_;
              MenhirLib.EngineTypes.endp = _endpos_ctx_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7049 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : 'tv_statement = Obj.magic _6 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7056 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7062 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7067 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_ifelse_statement1 = 
# 825 "cparser/pre_parser.mly"
    ( ctx() )
# 7075 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_exclusive_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_inclusive_or_expression = 
# 349 "cparser/pre_parser.mly"
    ()
# 7100 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_exclusive_or_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7134 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_inclusive_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_inclusive_or_expression = 
# 349 "cparser/pre_parser.mly"
    ()
# 7143 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_attribute_specifier_list = Obj.magic _3 in
        let _2 : 'tv_save_context = Obj.magic _2 in
        let _1 : 'tv_declare_varname_declarator_noattrend_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_init_declarator = 
# 419 "cparser/pre_parser.mly"
    ()
# 7182 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_c_initializer = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7228 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_attribute_specifier_list = Obj.magic _3 in
        let _2 : 'tv_save_context = Obj.magic _2 in
        let _1 : 'tv_declare_varname_declarator_noattrend_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_init_declarator = 
# 419 "cparser/pre_parser.mly"
    ()
# 7239 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_init_declarator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_init_declarator_list = 
# 414 "cparser/pre_parser.mly"
    ()
# 7264 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_init_declarator = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7298 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_init_declarator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_init_declarator_list = 
# 414 "cparser/pre_parser.mly"
    ()
# 7307 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_c_initializer = Obj.magic _2 in
        let _1 : 'tv_option_designation_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_initializer_list = 
# 763 "cparser/pre_parser.mly"
    ()
# 7339 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_c_initializer = Obj.magic _4 in
        let _3 : 'tv_option_designation_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7380 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_initializer_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_initializer_list = 
# 763 "cparser/pre_parser.mly"
    ()
# 7389 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ctx;
                    MenhirLib.EngineTypes.startp = _startpos_ctx_;
                    MenhirLib.EngineTypes.endp = _endpos_ctx_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : 'tv_statement = Obj.magic _6 in
        let _5 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7441 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_expression = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7447 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7452 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_iteration_statement = 
# 841 "cparser/pre_parser.mly"
    ( ctx() )
# 7461 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ctx;
                      MenhirLib.EngineTypes.startp = _startpos_ctx_;
                      MenhirLib.EngineTypes.endp = _endpos_ctx_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7518 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7523 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_expression = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7529 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7534 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_do_statement1 = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_iteration_statement = 
# 841 "cparser/pre_parser.mly"
    ( ctx() )
# 7544 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ctx;
                      MenhirLib.EngineTypes.startp = _startpos_ctx_;
                      MenhirLib.EngineTypes.endp = _endpos_ctx_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : 'tv_statement = Obj.magic _7 in
        let _6 : 'tv_optional_expression_RPAREN_ = Obj.magic _6 in
        let _5 : 'tv_optional_expression_SEMICOLON_ = Obj.magic _5 in
        let _4 : 'tv_for_statement_header = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7605 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7610 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_iteration_statement = 
# 841 "cparser/pre_parser.mly"
    ( ctx() )
# 7619 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7652 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7658 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_jump_statement = let _2 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 7666 "cparser/pre_parser.ml"
         in
        
# 817 "cparser/pre_parser.mly"
    ()
# 7671 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7698 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7703 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_jump_statement = 
# 817 "cparser/pre_parser.mly"
    ()
# 7711 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7738 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7743 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_jump_statement = 
# 817 "cparser/pre_parser.mly"
    ()
# 7751 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7784 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_c_initializer_ = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7790 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_jump_statement = 
# 817 "cparser/pre_parser.mly"
    ()
# 7798 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7831 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_init_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_declaration_block_item__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_kr_param_declaration = 
# 908 "cparser/pre_parser.mly"
    ()
# 7841 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_statement = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7875 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_labeled_statement = let _1 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 7884 "cparser/pre_parser.ml"
         in
        
# 792 "cparser/pre_parser.mly"
    ()
# 7889 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_statement = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7929 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _1_inlined1 : 'tv_conditional_expression = Obj.magic _1_inlined1 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7935 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_labeled_statement = let _2 = 
# 392 "cparser/pre_parser.mly"
    ()
# 7943 "cparser/pre_parser.ml"
         in
        
# 792 "cparser/pre_parser.mly"
    ()
# 7948 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_statement = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7982 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7987 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_labeled_statement = 
# 792 "cparser/pre_parser.mly"
    ()
# 7995 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_list_declaration_specifier_no_type_ = let _1 = 
# 171 "cparser/pre_parser.mly"
              ()
# 8013 "cparser/pre_parser.ml"
         in
        
# 175 "cparser/pre_parser.mly"
              ()
# 8018 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_storage_class_specifier_no_typedef = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : 'tv_list_declaration_specifier_no_type_ = let _1 =
          let _2 = 
# 444 "cparser/pre_parser.mly"
    ()
# 8051 "cparser/pre_parser.ml"
           in
          
# 172 "cparser/pre_parser.mly"
              ()
# 8056 "cparser/pre_parser.ml"
          
        in
        
# 175 "cparser/pre_parser.mly"
              ()
# 8062 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_type_qualifier_noattr = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : 'tv_list_declaration_specifier_no_type_ = let _1 =
          let _2 = 
# 444 "cparser/pre_parser.mly"
    ()
# 8095 "cparser/pre_parser.ml"
           in
          
# 172 "cparser/pre_parser.mly"
              ()
# 8100 "cparser/pre_parser.ml"
          
        in
        
# 175 "cparser/pre_parser.mly"
              ()
# 8106 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_function_specifier = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : 'tv_list_declaration_specifier_no_type_ = let _1 =
          let _2 = 
# 444 "cparser/pre_parser.mly"
    ()
# 8139 "cparser/pre_parser.ml"
           in
          
# 172 "cparser/pre_parser.mly"
              ()
# 8144 "cparser/pre_parser.ml"
          
        in
        
# 175 "cparser/pre_parser.mly"
              ()
# 8150 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_attribute_specifier = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : 'tv_list_declaration_specifier_no_type_ = let _1 =
          let _2 = 
# 444 "cparser/pre_parser.mly"
    ()
# 8183 "cparser/pre_parser.ml"
           in
          
# 172 "cparser/pre_parser.mly"
              ()
# 8188 "cparser/pre_parser.ml"
          
        in
        
# 175 "cparser/pre_parser.mly"
              ()
# 8194 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_list_declaration_specifier_no_typedef_name_ = let _1 = 
# 171 "cparser/pre_parser.mly"
              ()
# 8212 "cparser/pre_parser.ml"
         in
        
# 175 "cparser/pre_parser.mly"
              ()
# 8217 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_declaration_specifier_no_typedef_name = Obj.magic _2 in
        let _1 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_list_declaration_specifier_no_typedef_name_ = let _1 = 
# 172 "cparser/pre_parser.mly"
              ()
# 8249 "cparser/pre_parser.ml"
         in
        
# 175 "cparser/pre_parser.mly"
              ()
# 8254 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_list_pointer1_ = let _1 = 
# 171 "cparser/pre_parser.mly"
              ()
# 8272 "cparser/pre_parser.ml"
         in
        
# 175 "cparser/pre_parser.mly"
              ()
# 8277 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_option_type_qualifier_list_ = Obj.magic _2 in
        let _1_inlined1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8311 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_list_pointer1_ = let _1 =
          let _2 = 
# 707 "cparser/pre_parser.mly"
    ()
# 8321 "cparser/pre_parser.ml"
           in
          
# 172 "cparser/pre_parser.mly"
              ()
# 8326 "cparser/pre_parser.ml"
          
        in
        
# 175 "cparser/pre_parser.mly"
              ()
# 8332 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_list_specifier_qualifier_no_typedef_name_ = let _1 = 
# 171 "cparser/pre_parser.mly"
              ()
# 8350 "cparser/pre_parser.ml"
         in
        
# 175 "cparser/pre_parser.mly"
              ()
# 8355 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_specifier_qualifier_no_typedef_name = Obj.magic _2 in
        let _1 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_list_specifier_qualifier_no_typedef_name_ = let _1 = 
# 172 "cparser/pre_parser.mly"
              ()
# 8387 "cparser/pre_parser.ml"
         in
        
# 175 "cparser/pre_parser.mly"
              ()
# 8392 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_list_translation_item_ = let _1 = 
# 171 "cparser/pre_parser.mly"
              ()
# 8410 "cparser/pre_parser.ml"
         in
        
# 175 "cparser/pre_parser.mly"
              ()
# 8415 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_translation_item = Obj.magic _2 in
        let _1 : 'tv_list_translation_item_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_list_translation_item_ = let _1 = 
# 172 "cparser/pre_parser.mly"
              ()
# 8447 "cparser/pre_parser.ml"
         in
        
# 175 "cparser/pre_parser.mly"
              ()
# 8452 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_inclusive_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_logical_and_expression = 
# 354 "cparser/pre_parser.mly"
    ()
# 8477 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_inclusive_or_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8511 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_logical_and_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_logical_and_expression = 
# 354 "cparser/pre_parser.mly"
    ()
# 8520 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_logical_and_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_logical_or_expression = 
# 359 "cparser/pre_parser.mly"
    ()
# 8545 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_logical_and_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8579 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_logical_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_logical_or_expression = 
# 359 "cparser/pre_parser.mly"
    ()
# 8588 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_low_prec = 
# 651 "cparser/pre_parser.mly"
                          ()
# 8606 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_cast_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_multiplicative_expression = 
# 302 "cparser/pre_parser.mly"
    ()
# 8631 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_cast_expression = Obj.magic _3 in
        let _2 : 'tv_multiplicative_operator = Obj.magic _2 in
        let _1 : 'tv_multiplicative_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_multiplicative_expression = 
# 302 "cparser/pre_parser.mly"
    ()
# 8670 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8691 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_multiplicative_operator = 
# 297 "cparser/pre_parser.mly"
                         ()
# 8699 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8720 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_multiplicative_operator = 
# 297 "cparser/pre_parser.mly"
                         ()
# 8728 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8749 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_multiplicative_operator = 
# 297 "cparser/pre_parser.mly"
                         ()
# 8757 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_COMMA_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 8775 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 8780 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8801 "cparser/pre_parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_COMMA_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 8809 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 8814 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_abstract_declarator_parameter_declaration__ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 8832 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 8837 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_abstract_declarator_parameter_declaration_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_abstract_declarator_parameter_declaration__ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 8862 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 8867 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_abstract_declarator_type_name__ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 8885 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 8890 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_abstract_declarator_type_name_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_abstract_declarator_type_name__ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 8915 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 8920 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_argument_expression_list_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 8938 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 8943 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_argument_expression_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_argument_expression_list_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 8968 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 8973 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_block_item_list_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 8991 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 8996 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_block_item_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_block_item_list_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9021 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9026 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_c_initializer_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9044 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9049 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_c_initializer = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_c_initializer_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9074 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9079 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_context_parameter_type_list_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9097 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9102 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_context_parameter_type_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_context_parameter_type_list_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9127 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9132 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_declarator_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9150 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9155 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_declarator_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9180 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9185 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_designation_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9203 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9208 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_designation = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_designation_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9233 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9238 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_designator_list_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9256 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9261 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_designator_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_designator_list_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9286 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9291 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_direct_abstract_declarator_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9309 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9314 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_direct_abstract_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_direct_abstract_declarator_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9339 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9344 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_expression_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9362 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9367 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_expression_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9392 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9397 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_identifier_list_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9415 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9420 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_identifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_identifier_list_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9445 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9450 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_init_declarator_list_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9468 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9473 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_init_declarator_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_init_declarator_list_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9498 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9503 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_other_identifier_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9521 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9526 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_option_other_identifier_ = let o =
          let x = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 9552 "cparser/pre_parser.ml"
           in
          
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9557 "cparser/pre_parser.ml"
          
        in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9563 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_struct_declarator_list_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9581 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9586 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_struct_declarator_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_struct_declarator_list_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9611 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9616 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_type_qualifier_list_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9634 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9639 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_type_qualifier_list_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9664 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9669 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_typedef_declarator_list_ = let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9687 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9692 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_typedef_declarator_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_typedef_declarator_list_ = let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9717 "cparser/pre_parser.ml"
         in
        
# 153 "cparser/pre_parser.mly"
    ( o )
# 9722 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9743 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_optional_assignment_expression_RBRACK_ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9751 "cparser/pre_parser.ml"
         in
        
# 161 "cparser/pre_parser.mly"
               ()
# 9756 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9783 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_assignment_expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_optional_assignment_expression_RBRACK_ = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9792 "cparser/pre_parser.ml"
         in
        
# 161 "cparser/pre_parser.mly"
               ()
# 9797 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9818 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_optional_expression_RPAREN_ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9826 "cparser/pre_parser.ml"
         in
        
# 161 "cparser/pre_parser.mly"
               ()
# 9831 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9858 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_optional_expression_RPAREN_ = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9867 "cparser/pre_parser.ml"
         in
        
# 161 "cparser/pre_parser.mly"
               ()
# 9872 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9893 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_optional_expression_SEMICOLON_ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9901 "cparser/pre_parser.ml"
         in
        
# 161 "cparser/pre_parser.mly"
               ()
# 9906 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9933 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_optional_expression_SEMICOLON_ = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9942 "cparser/pre_parser.ml"
         in
        
# 161 "cparser/pre_parser.mly"
               ()
# 9947 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_declare_varname_declarator_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_parameter_declaration_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_parameter_declaration = 
# 734 "cparser/pre_parser.mly"
    ()
# 9979 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_option_abstract_declarator_parameter_declaration__ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_parameter_declaration_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_parameter_declaration = 
# 734 "cparser/pre_parser.mly"
    ()
# 10011 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_parameter_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_parameter_list = 
# 729 "cparser/pre_parser.mly"
    ()
# 10036 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_parameter_declaration = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10070 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_parameter_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_parameter_list = 
# 729 "cparser/pre_parser.mly"
    ()
# 10079 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_parameter_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_parameter_type_list = 
# 724 "cparser/pre_parser.mly"
    ()
# 10104 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10137 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10142 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_parameter_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_parameter_type_list = 
# 724 "cparser/pre_parser.mly"
    ()
# 10151 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_primary_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_postfix_expression = 
# 265 "cparser/pre_parser.mly"
    ()
# 10176 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10215 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10221 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expression = 
# 265 "cparser/pre_parser.mly"
    ()
# 10230 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10269 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_argument_expression_list_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10275 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expression = 
# 265 "cparser/pre_parser.mly"
    ()
# 10284 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10335 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_type_name = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10341 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10347 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10352 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_postfix_expression = 
# 265 "cparser/pre_parser.mly"
    ()
# 10360 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10411 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10417 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10423 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10428 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_postfix_expression = let _5 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 10436 "cparser/pre_parser.ml"
         in
        
# 265 "cparser/pre_parser.mly"
    ()
# 10441 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10498 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : 'tv_designator_list = Obj.magic _6 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10505 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10511 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10516 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_postfix_expression = let _5 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 10524 "cparser/pre_parser.ml"
         in
        
# 265 "cparser/pre_parser.mly"
    ()
# 10529 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10563 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_postfix_expression = let _3 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 10572 "cparser/pre_parser.ml"
         in
        
# 265 "cparser/pre_parser.mly"
    ()
# 10577 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10611 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_postfix_expression = let _3 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 10620 "cparser/pre_parser.ml"
         in
        
# 265 "cparser/pre_parser.mly"
    ()
# 10625 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10652 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expression = 
# 265 "cparser/pre_parser.mly"
    ()
# 10661 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10688 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expression = 
# 265 "cparser/pre_parser.mly"
    ()
# 10697 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10754 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : 'tv_option_COMMA_ = Obj.magic _6 in
        let _5 : 'tv_initializer_list = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10761 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10766 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_type_name = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10772 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_postfix_expression = 
# 265 "cparser/pre_parser.mly"
    ()
# 10780 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 10807 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 46 "cparser/pre_parser.mly"
      (string)
# 10812 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_primary_expression = let _1 = 
# 199 "cparser/pre_parser.mly"
    ( i )
# 10820 "cparser/pre_parser.ml"
         in
        
# 251 "cparser/pre_parser.mly"
    ()
# 10825 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 49 "cparser/pre_parser.mly"
      (Cabs.constant * Cabs.loc)
# 10846 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expression = 
# 251 "cparser/pre_parser.mly"
    ()
# 10854 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_string_literals_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expression = 
# 251 "cparser/pre_parser.mly"
    ()
# 10879 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10912 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_expression = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10918 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expression = 
# 251 "cparser/pre_parser.mly"
    ()
# 10926 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_shift_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_expression = 
# 326 "cparser/pre_parser.mly"
    ()
# 10951 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_shift_expression = Obj.magic _3 in
        let _2 : 'tv_relational_operator = Obj.magic _2 in
        let _1 : 'tv_relational_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_relational_expression = 
# 326 "cparser/pre_parser.mly"
    ()
# 10990 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11011 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_operator = 
# 321 "cparser/pre_parser.mly"
                      ()
# 11019 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11040 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_operator = 
# 321 "cparser/pre_parser.mly"
                      ()
# 11048 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11069 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_operator = 
# 321 "cparser/pre_parser.mly"
                      ()
# 11077 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11098 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_operator = 
# 321 "cparser/pre_parser.mly"
                      ()
# 11106 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_storage_class_specifier_no_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 444 "cparser/pre_parser.mly"
    ()
# 11131 "cparser/pre_parser.ml"
         in
        
# 180 "cparser/pre_parser.mly"
              ()
# 11136 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_qualifier_noattr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 444 "cparser/pre_parser.mly"
    ()
# 11161 "cparser/pre_parser.ml"
         in
        
# 180 "cparser/pre_parser.mly"
              ()
# 11166 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_function_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 444 "cparser/pre_parser.mly"
    ()
# 11191 "cparser/pre_parser.ml"
         in
        
# 180 "cparser/pre_parser.mly"
              ()
# 11196 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 444 "cparser/pre_parser.mly"
    ()
# 11221 "cparser/pre_parser.ml"
         in
        
# 180 "cparser/pre_parser.mly"
              ()
# 11226 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic _2 in
        let _1 : 'tv_storage_class_specifier_no_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 444 "cparser/pre_parser.mly"
    ()
# 11258 "cparser/pre_parser.ml"
         in
        
# 181 "cparser/pre_parser.mly"
              ()
# 11263 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic _2 in
        let _1 : 'tv_type_qualifier_noattr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 444 "cparser/pre_parser.mly"
    ()
# 11295 "cparser/pre_parser.ml"
         in
        
# 181 "cparser/pre_parser.mly"
              ()
# 11300 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic _2 in
        let _1 : 'tv_function_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 444 "cparser/pre_parser.mly"
    ()
# 11332 "cparser/pre_parser.ml"
         in
        
# 181 "cparser/pre_parser.mly"
              ()
# 11337 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic _2 in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 444 "cparser/pre_parser.mly"
    ()
# 11369 "cparser/pre_parser.ml"
         in
        
# 181 "cparser/pre_parser.mly"
              ()
# 11374 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_save_context = 
# 221 "cparser/pre_parser.mly"
              ( !save_context () )
# 11392 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ctx;
              MenhirLib.EngineTypes.startp = _startpos_ctx_;
              MenhirLib.EngineTypes.endp = _endpos_ctx_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_statement = Obj.magic _3 in
        let _2 : 'tv_ifelse_statement1 = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_selection_statement = 
# 831 "cparser/pre_parser.mly"
    ( ctx() )
# 11431 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ctx;
                      MenhirLib.EngineTypes.startp = _startpos_ctx_;
                      MenhirLib.EngineTypes.endp = _endpos_ctx_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : 'tv_statement = Obj.magic _7 in
        let _6 : 'tv_save_context = Obj.magic _6 in
        let _5 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11490 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_expression = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11496 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11501 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_selection_statement = 
# 831 "cparser/pre_parser.mly"
    ( ctx() )
# 11510 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ctx;
                    MenhirLib.EngineTypes.startp = _startpos_ctx_;
                    MenhirLib.EngineTypes.endp = _endpos_ctx_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : 'tv_statement = Obj.magic _6 in
        let _5 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11562 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_expression = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11568 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11573 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_selection_statement = 
# 831 "cparser/pre_parser.mly"
    ( ctx() )
# 11582 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_additive_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_shift_expression = 
# 318 "cparser/pre_parser.mly"
    ()
# 11607 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_additive_expression = Obj.magic _3 in
        let _2 : 'tv_shift_operator = Obj.magic _2 in
        let _1 : 'tv_shift_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_shift_expression = 
# 318 "cparser/pre_parser.mly"
    ()
# 11646 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11667 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_shift_operator = 
# 313 "cparser/pre_parser.mly"
               ()
# 11675 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11696 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_shift_operator = 
# 313 "cparser/pre_parser.mly"
               ()
# 11704 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_struct_declaration_ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 11736 "cparser/pre_parser.ml"
         in
        
# 532 "cparser/pre_parser.mly"
    ()
# 11741 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_struct_declaration_ = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 11780 "cparser/pre_parser.ml"
         in
        
# 532 "cparser/pre_parser.mly"
    ()
# 11785 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_struct_declaration_ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 11817 "cparser/pre_parser.ml"
         in
        
# 532 "cparser/pre_parser.mly"
    ()
# 11822 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_struct_declaration_ = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 11861 "cparser/pre_parser.ml"
         in
        
# 532 "cparser/pre_parser.mly"
    ()
# 11866 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_type_name_ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 11898 "cparser/pre_parser.ml"
         in
        
# 532 "cparser/pre_parser.mly"
    ()
# 11903 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_type_name_ = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 11942 "cparser/pre_parser.ml"
         in
        
# 532 "cparser/pre_parser.mly"
    ()
# 11947 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_type_name_ = let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 11979 "cparser/pre_parser.ml"
         in
        
# 532 "cparser/pre_parser.mly"
    ()
# 11984 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_type_name_ = let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 12023 "cparser/pre_parser.ml"
         in
        
# 532 "cparser/pre_parser.mly"
    ()
# 12028 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_specifier_no_typedef_name = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_specifier_qualifier_no_typedef_name = 
# 537 "cparser/pre_parser.mly"
    ()
# 12053 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_qualifier_noattr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_specifier_qualifier_no_typedef_name = let _1 = 
# 577 "cparser/pre_parser.mly"
    ()
# 12078 "cparser/pre_parser.ml"
         in
        
# 537 "cparser/pre_parser.mly"
    ()
# 12083 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_specifier_qualifier_no_typedef_name = let _1 = 
# 577 "cparser/pre_parser.mly"
    ()
# 12108 "cparser/pre_parser.ml"
         in
        
# 537 "cparser/pre_parser.mly"
    ()
# 12113 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_labeled_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 786 "cparser/pre_parser.mly"
    ()
# 12138 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_compound_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 786 "cparser/pre_parser.mly"
    ()
# 12163 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_expression_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 786 "cparser/pre_parser.mly"
    ()
# 12188 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_selection_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 786 "cparser/pre_parser.mly"
    ()
# 12213 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_iteration_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 786 "cparser/pre_parser.mly"
    ()
# 12238 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_jump_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 786 "cparser/pre_parser.mly"
    ()
# 12263 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_asm_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 786 "cparser/pre_parser.mly"
    ()
# 12288 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12345 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12350 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_string_literals_list = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12356 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _1_inlined1 : 'tv_conditional_expression = Obj.magic _1_inlined1 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12362 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12367 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_static_assert_declaration = let _3 = 
# 392 "cparser/pre_parser.mly"
    ()
# 12375 "cparser/pre_parser.ml"
         in
        
# 615 "cparser/pre_parser.mly"
    ()
# 12380 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12401 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_storage_class_specifier_no_typedef = 
# 435 "cparser/pre_parser.mly"
    ()
# 12409 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12430 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_storage_class_specifier_no_typedef = 
# 435 "cparser/pre_parser.mly"
    ()
# 12438 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12459 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_storage_class_specifier_no_typedef = 
# 435 "cparser/pre_parser.mly"
    ()
# 12467 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12488 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_storage_class_specifier_no_typedef = 
# 435 "cparser/pre_parser.mly"
    ()
# 12496 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 50 "cparser/pre_parser.mly"
      (bool * int64 list * Cabs.loc)
# 12517 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_string_literals_list = 
# 218 "cparser/pre_parser.mly"
    ()
# 12525 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 50 "cparser/pre_parser.mly"
      (bool * int64 list * Cabs.loc)
# 12552 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_string_literals_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_string_literals_list = 
# 218 "cparser/pre_parser.mly"
    ()
# 12561 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12594 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_struct_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_specifier_qualifier_list_struct_declaration_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_struct_declaration = 
# 524 "cparser/pre_parser.mly"
    ()
# 12604 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_static_assert_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_declaration = 
# 524 "cparser/pre_parser.mly"
    ()
# 12629 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_struct_declaration_list = 
# 519 "cparser/pre_parser.mly"
    ()
# 12647 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_struct_declaration = Obj.magic _2 in
        let _1 : 'tv_struct_declaration_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_struct_declaration_list = 
# 519 "cparser/pre_parser.mly"
    ()
# 12679 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declarator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_declarator = 
# 547 "cparser/pre_parser.mly"
    ()
# 12704 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_conditional_expression = Obj.magic _1_inlined1 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12738 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_option_declarator_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : 'tv_struct_declarator = let _3 = 
# 392 "cparser/pre_parser.mly"
    ()
# 12747 "cparser/pre_parser.ml"
         in
        
# 547 "cparser/pre_parser.mly"
    ()
# 12752 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_struct_declarator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_declarator_list = 
# 542 "cparser/pre_parser.mly"
    ()
# 12777 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_struct_declarator = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12811 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_struct_declarator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_struct_declarator_list = 
# 542 "cparser/pre_parser.mly"
    ()
# 12820 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12841 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_or_union = 
# 514 "cparser/pre_parser.mly"
    ()
# 12849 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12870 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_or_union = 
# 514 "cparser/pre_parser.mly"
    ()
# 12878 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12929 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_struct_declaration_list = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12935 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_other_identifier_ = Obj.magic _3 in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : 'tv_struct_or_union = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_struct_or_union_specifier = 
# 509 "cparser/pre_parser.mly"
    ()
# 12946 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : 'tv_struct_or_union = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_struct_or_union_specifier = let _3 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 12985 "cparser/pre_parser.ml"
         in
        
# 509 "cparser/pre_parser.mly"
    ()
# 12990 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_function_definition = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_translation_item = let _1 = 
# 898 "cparser/pre_parser.mly"
    ()
# 13015 "cparser/pre_parser.ml"
         in
        
# 892 "cparser/pre_parser.mly"
    ()
# 13020 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declaration_external_declaration_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_translation_item = let _1 = 
# 898 "cparser/pre_parser.mly"
    ()
# 13045 "cparser/pre_parser.ml"
         in
        
# 892 "cparser/pre_parser.mly"
    ()
# 13050 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 51 "cparser/pre_parser.mly"
      (string * Cabs.loc)
# 13071 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_translation_item = let _1 = 
# 898 "cparser/pre_parser.mly"
    ()
# 13079 "cparser/pre_parser.ml"
         in
        
# 892 "cparser/pre_parser.mly"
    ()
# 13084 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13105 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_translation_item = 
# 892 "cparser/pre_parser.mly"
    ()
# 13113 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : 'tv_list_translation_item_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 82 "cparser/pre_parser.mly"
      (unit)
# 13145 "cparser/pre_parser.ml"
        ) = 
# 887 "cparser/pre_parser.mly"
    ()
# 13149 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_option_abstract_declarator_type_name__ = Obj.magic _2 in
        let _1 : 'tv_specifier_qualifier_list_type_name_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_type_name = 
# 738 "cparser/pre_parser.mly"
    ()
# 13181 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_type_qualifier_noattr = Obj.magic _1_inlined1 in
        let _1 : 'tv_option_type_qualifier_list_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : 'tv_type_qualifier_list = let _2 = 
# 577 "cparser/pre_parser.mly"
    ()
# 13213 "cparser/pre_parser.ml"
         in
        
# 715 "cparser/pre_parser.mly"
    ()
# 13218 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_attribute_specifier = Obj.magic _1_inlined1 in
        let _1 : 'tv_option_type_qualifier_list_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : 'tv_type_qualifier_list = let _2 = 
# 577 "cparser/pre_parser.mly"
    ()
# 13250 "cparser/pre_parser.ml"
         in
        
# 715 "cparser/pre_parser.mly"
    ()
# 13255 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13276 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_qualifier_noattr = 
# 572 "cparser/pre_parser.mly"
    ()
# 13284 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13305 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_qualifier_noattr = 
# 572 "cparser/pre_parser.mly"
    ()
# 13313 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13334 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_qualifier_noattr = 
# 572 "cparser/pre_parser.mly"
    ()
# 13342 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13363 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 504 "cparser/pre_parser.mly"
    ()
# 13371 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13392 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 504 "cparser/pre_parser.mly"
    ()
# 13400 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13421 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 504 "cparser/pre_parser.mly"
    ()
# 13429 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13450 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 504 "cparser/pre_parser.mly"
    ()
# 13458 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13479 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 504 "cparser/pre_parser.mly"
    ()
# 13487 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13508 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 504 "cparser/pre_parser.mly"
    ()
# 13516 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13537 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 504 "cparser/pre_parser.mly"
    ()
# 13545 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13566 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 504 "cparser/pre_parser.mly"
    ()
# 13574 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13595 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 504 "cparser/pre_parser.mly"
    ()
# 13603 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13624 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 504 "cparser/pre_parser.mly"
    ()
# 13632 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_struct_or_union_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 504 "cparser/pre_parser.mly"
    ()
# 13657 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_enum_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 504 "cparser/pre_parser.mly"
    ()
# 13682 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declare_typename_declarator_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_typedef_declarator = 
# 428 "cparser/pre_parser.mly"
    ()
# 13707 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_typedef_declarator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_typedef_declarator_list = 
# 424 "cparser/pre_parser.mly"
    ()
# 13732 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_typedef_declarator = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13766 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_typedef_declarator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_typedef_declarator_list = 
# 424 "cparser/pre_parser.mly"
    ()
# 13775 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 13802 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 46 "cparser/pre_parser.mly"
      (string)
# 13807 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_typedef_name = 
# 195 "cparser/pre_parser.mly"
    ( i )
# 13815 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_expression = 
# 280 "cparser/pre_parser.mly"
    ()
# 13840 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_unary_expression = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13868 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expression = 
# 280 "cparser/pre_parser.mly"
    ()
# 13876 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_unary_expression = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13904 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expression = 
# 280 "cparser/pre_parser.mly"
    ()
# 13912 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_cast_expression = Obj.magic _2 in
        let _1 : 'tv_unary_operator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expression = 
# 280 "cparser/pre_parser.mly"
    ()
# 13944 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_unary_expression = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13972 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expression = 
# 280 "cparser/pre_parser.mly"
    ()
# 13980 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14019 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14025 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14030 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_unary_expression = 
# 280 "cparser/pre_parser.mly"
    ()
# 14038 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14077 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14083 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14088 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_unary_expression = 
# 280 "cparser/pre_parser.mly"
    ()
# 14096 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14117 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 289 "cparser/pre_parser.mly"
    ()
# 14125 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14146 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 289 "cparser/pre_parser.mly"
    ()
# 14154 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14175 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 289 "cparser/pre_parser.mly"
    ()
# 14183 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14204 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 289 "cparser/pre_parser.mly"
    ()
# 14212 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14233 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 289 "cparser/pre_parser.mly"
    ()
# 14241 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14262 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 289 "cparser/pre_parser.mly"
    ()
# 14270 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
end

let translation_unit_file =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf) : (
# 82 "cparser/pre_parser.mly"
      (unit)
# 14301 "cparser/pre_parser.ml"
    ))

module Incremental = struct
  
  let translation_unit_file =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (
# 82 "cparser/pre_parser.mly"
      (unit)
# 14311 "cparser/pre_parser.ml"
      ) MenhirInterpreter.checkpoint)
  
end
