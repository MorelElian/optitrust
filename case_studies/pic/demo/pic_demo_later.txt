(*


  LATER:
  const int idCell = (iX * gridY + iY) * gridZ + iZ;
  could be
  cellOfCoord(iX, iY, iZ)
  if the user provides the name for this function




  LATER
  Flags.print_coumpound_expressions
  *)


(* LATER !! Function.beta ~indepth:true [dRoot]; try in a unit test with two beta reductions to do *)

(* TODO: res should be field_at_corners *)



(* if not doublepos then begin
    bigstep "Turn positions into floats";
    !! Cast.insert (ty "float") [sExprRegexp ~substr:true "p.2 - i.2"];
    LATER: target the [sRexegp "c->itemsPos[[.]] = ")  or iter_dims  or   ==>best: cOr (map_dims .. )
    !! Struct.update_fields_type "itemsPos." (ty "float") [cTypDef "chunk"];
    LATER: type particle would need to be converted too
       const vect pos = {x, y, z};
       would need cast around the values
  end;
*)


  (* LATER: bigstep "Introduce matrix operations, and prepare loop on charge deposit";
   might be useful to group this next to the reveal_field of x/y/z *)

  (* LATER: menhir should support "res[]" syntax *)

  (* LATER: !! Expr.replace ~reparse:false (expr "MINDEX2(nbCells, 8, idCell2, k)")
           [step; cLabel "charge"; cCall "mybij"];
      instead use: sExpr "mybij(nbCorners, nbCells, indicesOfCorners(idCell2).v[k], k)"
       ARTHUR: simplify mybij calls in the sum *)


  (* LATER !! Instr.delete [cOr[[cVarDef "bagsNext"];[ cKindInstr; cVar "bagsNext"]]]; *)
  (* LATER !! Variable.delete [cVarDef "bagsNext"] ==> shorthand for above *)

  (* LATER: fission should automatically do the duplication of references when necessary *)

(* LATER: rename pic_demo.c to pic_naive.c *)

(*LATER halfBlock=expr "block/2"*)

(* LATER

// after createParticle, add applyScalingShifting(true)
// after cFor "idStep" in main, add applyScalingShifting(false)
void applyScalingShifting(bool dir) { // dir=true at entry, dir=false at exit
 for (int idCell = 0; idCell < nbCells; idCell++) {
    bag* b = &bagsCur[idCell];
    bag_iter bag_it;
    for (particle* p = bag_iter_begin(&bag_it, b); p != NULL; p = bag_iter_next_common(&bag_it, false)) {
      p->pos.x = p->pos.x;
      p->pos.y = p->pos.y;
      p->pos.z = p->pos.z;
      p->speed.x = p->speed.x;
      p->speed.y = p->speed.y;
      p->speed.z = p->speed.z;
    }
 }
}
/*
      p->pos.x = (p->pos.x + ix) * cellX;
      p->pos.y = p->pos.y;
      p->pos.z = p->pos.z;
      p->speed.x = p->speed.x * cellX / stepDuration;
      p->speed.y = p->speed.y;
      p->speed.z = p->speed.z;
*/

*)


(* LATER: keep this code, it might be useful in the future
     let wrapPow_def = "int wrapPowersOfTwo(int gridSize, int a) {return a & (gridSize - 1);}" in
  !! Sequence.insert ~reparse:true (stmt wrapPow_def) [tBefore; step];
  !! Function.inline [nbMulti; step; cCall "wrapPowersOfTwo"];*)


(* LATER: the C standard parses
      x & y - 1
  as
     x & (y - 1)
  but this is very confusing, so we should always put parentheses around nontrivial arguments of & and | operators.
  *)




(* DONE:

We have in the top of the step function

 for (int idCell = 0; idCell < nbCells; idCell++) {
    for (int idCorner = 0; idCorner < 8; idCorner++) {
      for (int idThread = 0; idThread < nbThreads; idThread++) {
        depositThreadCorners[MINDEX3(nbCells, 8, nbThreads, idCell, idCorner,
                                     idThread)] = 0.;
      }
    }
  }


at the very least this needs to be done using omp parallel on the outer loop.


Another possibility is to move the reset of depositThreadCorners into the allocate function,
and to simply modify the line

      for (int idThread = 0; idThread < nbThreads; idThread++) {
        sum += depositThreadCorners[MINDEX3(nbCells, 8, nbThreads, idCell, idCorner, idThread)];
      }

into

      for (int idThread = 0; idThread < nbThreads; idThread++) {
        sum += depositThreadCorners[MINDEX3(nbCells, 8, nbThreads, idCell,idCorner, idThread)];
        depositThreadCorners[MINDEX3(nbCells, 8, nbThreads, idCell,idCorner, idThread)] = 0;
      }


*)


  (* ARTHUR NOTES
  if false then begin (* only for paper illustration purpose, not meant to work beyond this step *)
    bigstep "For paper illustration purpose, introduce nbTreads";
    !! Sequence.insert (expr "#include \"omp.h\"") [tFirst; dRoot];
    !! Variable.insert ~const:false ~name:"nbThreads" ~typ:(ty "int") ~value:(lit "4") [tBefore; cVarDef "nbCells"];
    !! Trace.reparse();
    (* fix this line, or possibly the one below if it is easier ; For this, replace "if false" with "if true" above. *)
    (*!! Matrix.delocalize "deposit" ~into:"depositThread" ~indices:["idCell"]
        init_zero:true ~dim:(var "nbThreads") ~index:"idThread" ~acc_in_place:true ~ops:delocalize_sum ~use:(Some (var "idThread"))
        [cLabel "core"];*)
    (* !! Matrix_basic.delocalize ~acc_in_place:true ~dim:(var "nbThreads") ~index:"idThread" ~acc:"sum" ~ops:delocalize_sum [cLabelBody "core"]; *)
  end;
 *)


 (* !! Instr.move_out_of_fun [nbMulti; ctx; cVarDefReg "\\(coef\\|sign\\)."]; *) (* TODO: Fix me *)

 % !! TOO COMPLEX Loop.grid_enumerate ~unfold_bound:true ~indices:(map_dims (fun d -> "i"^d); [step; cLabel "core"; cFor "idCell"];

 (* let _ = Flags.code_print_width := 120 *)




in
bigstep "Simplify arithmetic expressions after scaling";
  (* !! Function.use_infix_ops ~indepth:true [step; dBody]; PAPER ONLY, else done further *)


  let tg = cTarget [step; cFor "idCell" ~body:[cFor "i"]] in
  => call it the "main" loop using a label


  LATER: make labels like marks: not an extra node in AST.

  (* LATER: make cOr work for targetBetweens (hard) *)

   (* TODO: Hide labels argument *)
  !! Matrix.delocalize "deposit" ~into:"depositCorners" ~last:true ~indices:["idCell"] ~init_zero:true
     ~labels:["alloc"; ""; "dealloc"] ~dealloc_tg:(Some [cTopFunDef ~regexp:true "dealloc.*"; cFor ""])
     ~dim:(var "nbCorners") ~index:"idCorner" ~acc:"sum" ~ops:delocalize_sum ~use:(Some (var "idCorner")) ~alloc_instr [cLabel "core"];


      !! Instr.delete [step; cLabel "charge"; cOmp()]; (* BEAUTIFY: Instr.set_nonatomic ; also cPragma is needed *)

      (* Arthur: check A / B logic *)

        (* LATER: use a generic -D flag for optitrust *)


        Makefile
        # LATER: build different output files depending on the usechecker flag

#	$(V)NB=`source $(PICDIR)/your_configuration.sh; $$nb_threads`; if [[ $${NB} < 2 ]]; then echo "ERROR: you should use multiple threads in your_configuration.sh to run the checker"; exit 1; fi
# alternative: $(V)cp template_configuration_checker.sh $(PICDIR)/simulations/scripts/parameters_3d.txt
